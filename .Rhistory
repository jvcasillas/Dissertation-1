#        "ims_cond_anova", "ims_wm_anova", "ims_int_anova",
"full_group_anova", "full_stress_anova", "full_int_anova"
))
save(nested_model_comparisons,
file = here("mods", "stress", "gca",
"nested_model_comparisons.Rdata"))
# Save models predictions
model_preds <- mget(c("fits_all", "target_offset_preds"))
save(model_preds,
file = here("mods", "stress", "gca",
"model_preds.Rdata"))
names(stress_gc_subset)
wm <- read_csv("./data/clean/ospan_set_z_scores.csv")
stress_50 <- merge(x = stress50, y = wm, by = "participant", all.x=TRUE)
stress_50 <- na.omit(stress_50)
stress_gc_subset <- stress_50 %>%
select(., -WM_set) %>%
filter(., time_zero >= -4 & time_zero <= 12) %>%
mutate(., group = fct_relevel(group, "mon", "aes", "ams", "ies", "ims"),
condition_sum = if_else(cond == "1", 1, -1)) %>%       # 1 = present, 2 = past
poly_add_columns(., time_zero, degree = 3, prefix = "ot")
View(stress_gc_subset)
gca_full_mod_wm_0 <- update(gca_full_mod_stress_2,   . ~ . + ospan)
gca_full_mod_wm_1 <- update(gca_full_mod_wm_0, . ~ . + ot1:ospan)
View(music50)
pitch <- read_csv(here("data", 'clean', "pitch_long.csv"))
pitch <- pitch %>%
select(., -X1) %>%
rename(., pitch_rt = rt)
pitch_glm <- lmer(pitch_rt ~ base_note + direction + (1 | participant),
data = pitch)
pitch_ranef <- ranef(pitch_glm) %>% as_tibble()
View(pitch_ranef)
View(music50)
View(auditory)
gca_full_mod_wm_2 <- update(gca_full_mod_wm_1, . ~ . + ot2:ospan)
gca_full_mod_wm_3 <- update(gca_full_mod_wm_2, . ~ . + ot3:ospan)
full_wm_anova <-
anova(gca_full_mod_stress_2, gca_full_mod_wm_0, gca_full_mod_wm_1,
gca_full_mod_wm_2, gca_full_mod_wm_3)
full_wm_anova
gca_full_mod_int_a <- update(gca_full_mod_stress_2, . ~ . + group:condition_sum:ospan)
gca_full_mod_int_b <- update(gca_full_mod_int_a, . ~ . + ot1:group:condition_sum) # singular
gca_full_mod_int_c <- update(gca_full_mod_int_b, . ~ . + ot2:group:condition_sum)
gca_full_mod_int_c <- update(gca_full_mod_int_b, . ~ . + ot2:group:condition_sum,
control = lmerControl(optimizer = 'bobyqa', optCtrl = list(maxfun = 3e5)))
gca_full_mod_int_c <- update(gca_full_mod_int_b, . ~ . + ot2:group:condition_sum,
control = lmerControl(optimizer = 'bobyqa', optCtrl = list(maxfun = 4e5)))
gca_full_mod_int_b <- update(gca_full_mod_int_a, . ~ . + ot1:group:condition_sum:ospan) # singular
library("papaja")
library("officer")
library("flextable")
source(here::here("scripts", "01_helpers.R"))
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
source(here::here("scripts", "01_helpers.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "stress", "gca")
# Load models as list and store full mod to global env
load(paste0(gca_mods_path, "/model_preds.Rdata"))
load(paste0(gca_mods_path, "/gca_full_mods.Rdata"))
border_1 <- fp_border(width = 1.5)
border_2 <- fp_border(width = 0.75)
model_preds$target_offset_preds %>%
mutate(cond = if_else(stress == 1, "present", "preterit"),
group = fct_relevel(group, "SS", "AE", "AM", "IE", "IM")) %>%
arrange(group, desc(stress)) %>%
mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = cond, Probability = prob, LB = prob_lb,
UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
# Get full mod and make it pretty for the table
pretty_fixed_effects <- gca_full_mods$gca_full_mod_int_2 %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:3, 0), paste0(0:3, 1),
paste0(0:3, 2), paste0(0:3, 3),
paste0(0:3, 4), paste0(0:3, 5),
paste0(0:3, 6))
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects$Parameter %<>% paste(., var_labels)
pretty_fixed_effects %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
library("papaja")
library("officer")
library("flextable")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
source(here::here("scripts", "01_helpers.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "music", "gca")
# Load models as list and store full mod to global env
load(paste0(gca_mods_path, "/pitch_mods.Rdata"))
library("papaja")
library("officer")
library("flextable")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
#source(here::here("scripts", "02_load_data.R"))
source(here::here("scripts", "01_helpers.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "vision", "gca")
# Load models as list and store full mod to global env
load(paste0(gca_mods_path, "/full_mods.Rdata"))
border_1 <- fp_border(width = 1.5)
border_2 <- fp_border(width = 0.75)
model_preds$target_offset_preds %>%
mutate(stress = if_else(stress == 1, "paroxytone", "oxytone")) %>%
arrange(group, desc(stress), corsi, motion) %>%
mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = stress, `Visual pred.` = motion,
`Visuospatial WM` = corsi, Probability = prob, LB = prob_lb,
UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds$target_offset_preds %>%
mutate(stress = if_else(stress == 1, "paroxytone", "oxytone")) %>%
arrange(group, desc(stress), corsi) %>%
mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = stress, `Visual pred.` = motion,
`Visuospatial WM` = corsi, Probability = prob, LB = prob_lb,
UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds$target_offset_preds %>%
#mutate(stress = if_else(stress == 1, "paroxytone", "oxytone")) %>%
arrange(group, desc(stress), corsi) %>%
mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = stress, `Visual pred.` = motion,
`Visuospatial WM` = corsi, Probability = prob, LB = prob_lb,
UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds$target_offset_preds %>%
mutate(stress = if_else(stress == 1, "paroxytone", "oxytone")) %>%
arrange(group, desc(stress), corsi) %>%
#mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = stress, `Visual pred.` = motion,
`Visuospatial WM` = corsi, Probability = prob, LB = prob_lb,
UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
load(paste0(gca_mods_path, "/model_preds.Rdata"))
model_preds$target_offset_preds %>%
mutate(stress = if_else(stress == 1, "paroxytone", "oxytone")) %>%
arrange(group, desc(stress), corsi) %>%
mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = stress, `Visual pred.` = motion,
`Visuospatial WM` = corsi, Probability = prob, LB = prob_lb,
UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
pretty_fixed_effects[1,3]
# Get full mod and make it pretty for the table
pretty_fixed_effects <- full_mods$gca_full_mod_int_1 %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:3, 0), paste0(0:3, 1),
paste0(0:3, 2), paste0(0:3, 3),
paste0(0:3, 4), paste0(0:3, 5),
paste0(0:3, 6))
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects$Parameter %<>% paste(., var_labels)
pretty_fixed_effects %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
pretty_fixed_effects[1,3]
(*&gamma;*~00~&nbsp;=&nbsp;`r pretty_fixed_effects[1,3]`, SE =&nbsp;`r pretty_fixed_effects[1,4]`, *t* = `r pretty_fixed_effects[1,5]`, *p* = `r pretty_fixed_effects[11,6]`)
pretty_fixed_effects[11,6]
pretty_fixed_effects[23,6]
pretty_fixed_effects[37,3]
source(here::here("scripts", "00_load_libs.R"))
dem_all <- read_csv("./data/pupurri_analysis.csv")
dem_all$DELE <- as.numeric(dem_all$DELE)
dem_all %>%
filter(., group %in% c("ies", "aes", "ims", "ams")) %>%
group_by(., group) %>%
summarize(., DELE_mean = mean(DELE),
DELE_sd = sd(DELE),
n = n())
bartlett.test(DELE ~ group, data = dem_all) # all good
# DELE tost aes vs ams (OK, not significant and between dotted lines so they are not different)
TOSTER::TOSTtwo(m1 = 45.4, sd1 = 4.26, n1 = 32, # aes
m2 = 45.5, sd2 = 3.97, n2 = 32, # ams
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
# DELE tost ies vs ims (idem)
TOSTER::TOSTtwo(m1 = 31.7, sd1 = 4.58, n1 = 33, # ies
m2 = 32.8, sd2 = 4.23, n2 = 32, # ims
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
View(aes_pret_c3)
source(here::here("scripts", "02_load_data.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "vision", "gca")
# Load models as list and store full mod to global env
load(paste0(gca_mods_path, "/full_mods.Rdata"))
load(paste0(gca_mods_path, "/model_preds.Rdata"))
gca_final_model <- full_mods$gca_full_mod_int_1
# Set path for saving figs
figs_path <- here("figs", "vision", "gca")
model_preds$fits_all %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", "AE", "AM", "IE", "IM")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = car_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.75) +
geom_point(aes(color = car_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = car_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + #legend_adj
ggtitle('GCA considering visuospatial anticipation performance')
model_preds$fits_all %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", "AE", "AM", "IE", "IM")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = car_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.75) +
geom_point(aes(color = car_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = car_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + legend_adj
ggtitle('GCA considering visuospatial anticipation performance')
model_preds$fits_all %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", "AE", "AM", "IE", "IM")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = car_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.75) +
geom_point(aes(color = car_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = car_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Dose (mg)")#legend_adj
ggtitle('GCA considering visuospatial anticipation performance')
# Present group differences in movement anticipation
car_gca <- model_preds$fits_all %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", "AE", "AM", "IE", "IM")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = car_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.75) +
geom_point(aes(color = car_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = car_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Movement anticipation") + #legend_adj
ggtitle('GCA considering visuospatial anticipation performance')
# visuospatial WM
corsi_gca <- model_preds$fits_all %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", "AE", "AM", "IE", "IM")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = corsi)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.75) +
geom_point(aes(color = corsi), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = corsi), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Visuospatial WM") + #legend_adj
ggtitle("GCA considering visuospatial WM")
ggsave(paste0(figs_path, "/car_gca.png"), car_gca, width = 150,
height = 120, units = "mm", dpi = 600)
# ggsave(paste0(figs_path, "/stress_p2.eps"), stress_p2, width = 150,
#        height = 120, units = "mm", dpi = 600, device = cairo_ps)
ggsave(paste0(figs_path, "/corsi_gca.png"), corsi_gca, width = 150,
height = 120, units = "mm", dpi = 600)
model_preds$fits_all %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", "AE", "AM", "IE", "IM")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = car_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.75) +
geom_point(aes(color = car_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = car_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Movement\nanticipation") + #legend_adj
ggtitle('GCA considering visuospatial anticipation performance')
# Present group differences in movement anticipation
car_gca <- model_preds$fits_all %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", "AE", "AM", "IE", "IM")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = car_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.75) +
geom_point(aes(color = car_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = car_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Movement\nanticipation") + #legend_adj
ggtitle('GCA considering visuospatial anticipation performance')
# visuospatial WM
corsi_gca <- model_preds$fits_all %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", "AE", "AM", "IE", "IM")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = corsi)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.75) +
geom_point(aes(color = corsi), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = corsi), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Visuospatial\nWM") + #legend_adj
ggtitle("GCA considering visuospatial WM")
ggsave(paste0(figs_path, "/car_gca.png"), car_gca, width = 150,
height = 120, units = "mm", dpi = 600)
# ggsave(paste0(figs_path, "/stress_p2.eps"), stress_p2, width = 150,
#        height = 120, units = "mm", dpi = 600, device = cairo_ps)
ggsave(paste0(figs_path, "/corsi_gca.png"), corsi_gca, width = 150,
height = 120, units = "mm", dpi = 600)
# source(here::here("scripts", "00_load_libs.R"))
source(here::here("scripts", "02_load_data.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "music", "gca")
# Load models as list and store full mod to global env
load(paste0(gca_mods_path, "/pitch_mods.Rdata"))
load(paste0(gca_mods_path, "/rhythm_mods.Rdata"))
load(paste0(gca_mods_path, "/model_preds.Rdata"))
gca_final_mod <- full_mods$gca_full_mod_int_3
# Set path for saving figs
figs_path <- here("figs", "music", "gca")
model_preds$fits_all_pitch %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = pitch_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.75) +
geom_point(aes(color = pitch_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = pitch_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
# scale_color_brewer(palette = "Set1", name = "Syllable structure") +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Pitch RT")
# Pitch
gca_pitch_plot <- model_preds$fits_all_pitch %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = pitch_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.75) +
geom_point(aes(color = pitch_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = pitch_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
# scale_color_brewer(palette = "Set1", name = "Syllable structure") +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Pitch RT")#+ legend_adj
model_preds$fits_all_rhythm %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = rhythm_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.75) +
geom_point(aes(color = rhythm_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = rhythm_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
# scale_color_brewer(palette = "Set1", name = "Group") +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Rhythm\ndeviation")
# Rhythm
gca_rhythm_plot <- model_preds$fits_all_rhythm %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = rhythm_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.75) +
geom_point(aes(color = rhythm_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = rhythm_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
# scale_color_brewer(palette = "Set1", name = "Group") +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Rhythm\ndeviation")#+ legend_adj_2
ggsave(paste0(figs_path, "/gca_pitch_plot.png"), gca_pitch_plot, width = 150,
height = 120, units = "mm", dpi = 600)
# ggsave(paste0(figs_path, "/stress_p2.eps"), stress_p2, width = 150,
#        height = 120, units = "mm", dpi = 600, device = cairo_ps)
ggsave(paste0(figs_path, "/gca_rhythm_plot.png"), gca_rhythm_plot, width = 150,
height = 120, units = "mm", dpi = 600)
