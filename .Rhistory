theme_grey(base_size = 10, base_family = "Times")
model_preds$fits_all_l2_use %>%
mutate(`Weekly L2 use` = as.factor(use_z),
Condition = if_else(condition_sum == 1, "Present", "Preterit"),
Condition = fct_relevel(Condition, "Present"),
L1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
L1 = fct_relevel(L1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = L1, color = L1, lty = `Weekly L2 use`)) +
facet_grid(. ~ Condition) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) + #'grey'
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_line(size = 0.35) +
# geom_point(aes(color = Group), size = 0.8, show.legend = T) +  #alpha = .5, pch = 15,
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# labs(color = "Weekly Spanish use") + theme_big + legend_adj +
theme_grey(base_size = 10, base_family = "Times")
model_preds_l2$fits_all_l2_use %>%
mutate(`Weekly L2 use` = as.factor(use_z),
Condition = if_else(condition_sum == 1, "Present", "Preterit"),
Condition = fct_relevel(Condition, "Present"),
L1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
L1 = fct_relevel(L1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = L1, color = L1, lty = `Weekly L2 use`)) +
facet_grid(. ~ Condition) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) + #'grey'
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_line(size = 0.35) +
# geom_point(aes(color = Group), size = 0.8, show.legend = T) +  #alpha = .5, pch = 15,
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# labs(color = "Weekly Spanish use") + theme_big + legend_adj +
theme_grey(base_size = 10, base_family = "Times")
load(paste0(gca_mods_path, "/model_preds_l2.Rdata"))
list2env(model_preds_l2, globalenv())
load(paste0(gca_mods_path, "/model_preds_l2.Rdata"))
list2env(model_preds_l2, globalenv())
# Get path to saved models
gca_mods_path <- here("mods", "stress", "gca")
load(paste0(gca_mods_path, "/model_preds_l2.Rdata"))
list2env(model_preds_l2, globalenv())
load("~/Desktop/Dissertation/mods/stress/gca/model_preds_l2.Rdata")
list2env(model_preds_l2, globalenv())
model_preds_l2$fits_all_l2_use %>%
mutate(`Weekly L2 use` = as.factor(use_z),
Condition = if_else(condition_sum == 1, "Present", "Preterit"),
Condition = fct_relevel(Condition, "Present"),
L1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
L1 = fct_relevel(L1, "English", "Mandarin")
)
fits_all_l2_use %>%
mutate(`Weekly L2 use` = as.factor(use_z),
Condition = if_else(condition_sum == 1, "Present", "Preterit"),
Condition = fct_relevel(Condition, "Present"),
L1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
L1 = fct_relevel(L1, "English", "Mandarin")
)
fits_all_l2_use %>%
mutate(`Weekly L2 use` = as.factor(use_z),
Condition = if_else(condition_sum == 1, "Present", "Preterit"),
Condition = fct_relevel(Condition, "Present"),
L1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
L1 = fct_relevel(L1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = L1, color = L1, lty = `Weekly L2 use`)) +
facet_grid(. ~ Condition) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) + #'grey'
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_line(size = 0.35) +
# geom_point(aes(color = Group), size = 0.8, show.legend = T) +  #alpha = .5, pch = 15,
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# labs(color = "Weekly Spanish use") + theme_big + legend_adj +
theme_grey(base_size = 10, base_family = "Times")
load(paste0(gca_mods_path, "/model_preds_l2.Rdata"))
load(paste0(gca_mods_path, "/model_preds.Rdata"))
list2env(model_preds, globalenv())
list2env(model_preds_l2, globalenv())
# Load data
source(here::here("scripts", "02_load_data.R"))
stress_gc_subset <- stress50 %>%
# select(., -WM_set) %>%
filter(., time_zero >= -4 & time_zero <= 12) %>%
mutate(., l1 = fct_relevel(l1, "es", "en", "ma"),
condition_sum = if_else(cond == "1", 1, -1)) %>%       # 1 = present, 2 = past
poly_add_columns(., time_zero, degree = 3, prefix = "ot")
l2_data <- stress_gc_subset%>%
filter(., l1 != 'es') %>%
filter(., participant != 'ies04' & participant != 'ies17' & participant != 'ies28' & participant != 'aes32') %>%
mutate(., l1 = fct_relevel(l1, "en", "ma"))
load(paste0(gca_mods_path, "/gca_l2_mods.Rdata"))
list2env(gca_l2_mods, globalenv())
dele_dat_l2 <- l2_data %>%
dplyr::select(l1, time_zero, ot1:ot3, condition_sum) %>%
distinct %>%
mutate(l1 = as.character(l1)) %>%
expand_grid(., tibble(DELE_z = c(-1, 0, 1)))
use_dat_l2 <- l2_data %>%
dplyr::select(l1, time_zero, ot1:ot3, condition_sum) %>%
distinct %>%
mutate(l1 = as.character(l1)) %>%
expand_grid(., tibble(use_z = c(-1, 0, 1)))
fits_all_l2_dele <- predictSE(gca_l2_mod_dele_final, dele_dat_l2) %>%
as_tibble %>%
bind_cols(dele_dat_l2) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se,
l1 = fct_recode(l1, EN = "en", MA = "ma"),
l1 = fct_relevel(l1, "EN", "MA"))
fits_all_l2_use <- predictSE(gca_l2_mod_use_final, use_dat_l2) %>%
as_tibble %>%
bind_cols(use_dat_l2) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se,
l1 = fct_recode(l1, EN = "en", MA = "ma"),
l1 = fct_relevel(l1, "EN", "MA"))
fits_all_l2_use %>%
mutate(`Weekly L2 use` = as.factor(use_z),
Condition = if_else(condition_sum == 1, "Present", "Preterit"),
Condition = fct_relevel(Condition, "Present"),
L1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
L1 = fct_relevel(L1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = L1, color = L1, lty = `Weekly L2 use`)) +
facet_grid(. ~ Condition) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) + #'grey'
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_line(size = 0.35) +
# geom_point(aes(color = Group), size = 0.8, show.legend = T) +  #alpha = .5, pch = 15,
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# labs(color = "Weekly Spanish use") + theme_big + legend_adj +
theme_grey(base_size = 10, base_family = "Times")
use_cond <- fits_all_l2_use %>%
mutate(`Weekly L2 use` = as.factor(use_z),
Condition = if_else(condition_sum == 1, "Present", "Preterit"),
Condition = fct_relevel(Condition, "Present"),
L1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
L1 = fct_relevel(L1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = L1, color = L1, lty = `Weekly L2 use`)) +
facet_grid(. ~ Condition) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) + #'grey'
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_line(size = 0.35) +
# geom_point(aes(color = Group), size = 0.8, show.legend = T) +  #alpha = .5, pch = 15,
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# labs(color = "Weekly Spanish use") + theme_big + legend_adj +
theme_grey(base_size = 10, base_family = "Times")
fits_all_l2_use %>%
mutate(`Weekly L2 use` = as.factor(use_z),
Condition = if_else(condition_sum == 1, "Present", "Preterit"),
Condition = fct_relevel(Condition, "Present"),
L1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
L1 = fct_relevel(L1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = Condition, color = Condition, lty = `Weekly L2 use`)) +
facet_grid(. ~ L1) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) + #'grey'
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_line(size = 0.35) +
# geom_point(aes(color = Group), size = 0.8, show.legend = T) +  #alpha = .5, pch = 15,
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# labs(color = "Weekly Spanish use") + theme_big + legend_adj +
theme_grey(base_size = 10, base_family = "Times")
use_l1 <- fits_all_l2_use %>%
mutate(`Weekly L2 use` = as.factor(use_z),
Condition = if_else(condition_sum == 1, "Present", "Preterit"),
Condition = fct_relevel(Condition, "Present"),
L1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
L1 = fct_relevel(L1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = Condition, color = Condition, lty = `Weekly L2 use`)) +
facet_grid(. ~ L1) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) + #'grey'
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_line(size = 0.35) +
# geom_point(aes(color = Group), size = 0.8, show.legend = T) +  #alpha = .5, pch = 15,
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# labs(color = "Weekly Spanish use") + theme_big + legend_adj +
theme_grey(base_size = 10, base_family = "Times")
fits_all_l2_prof %>%
mutate(Proficiency = as.factor(prof_z),
Condition = if_else(condition_sum == 1, "Present", "Preterit"),
Condition = fct_relevel(Condition, "Present"),
L1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
L1 = fct_relevel(L1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = L1, color = L1, lty = Proficiency)) +
facet_grid(. ~ Condition) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) + #'grey'
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_line(size = 0.35) +
# geom_point(aes(color = Group), size = 0.8, show.legend = T) +  #alpha = .5, pch = 15,
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# labs(color = "Weekly Spanish use") + theme_big + legend_adj +
theme_grey(base_size = 10, base_family = "Times")
fits_all_l2_dele %>%
mutate(Proficiency = as.factor(DELE_z),
Condition = if_else(condition_sum == 1, "Present", "Preterit"),
Condition = fct_relevel(Condition, "Present"),
L1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
L1 = fct_relevel(L1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = L1, color = L1, lty = Proficiency)) +
facet_grid(. ~ Condition) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) + #'grey'
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_line(size = 0.35) +
# geom_point(aes(color = Group), size = 0.8, show.legend = T) +  #alpha = .5, pch = 15,
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# labs(color = "Weekly Spanish use") + theme_big + legend_adj +
theme_grey(base_size = 10, base_family = "Times")
prof_cond <- fits_all_l2_dele %>%
mutate(Proficiency = as.factor(DELE_z),
Condition = if_else(condition_sum == 1, "Present", "Preterit"),
Condition = fct_relevel(Condition, "Present"),
L1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
L1 = fct_relevel(L1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = L1, color = L1, lty = Proficiency)) +
facet_grid(. ~ Condition) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) + #'grey'
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_line(size = 0.35) +
# geom_point(aes(color = Group), size = 0.8, show.legend = T) +  #alpha = .5, pch = 15,
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# labs(color = "Weekly Spanish use") + theme_big + legend_adj +
theme_grey(base_size = 10, base_family = "Times")
fits_all_l2_dele %>%
mutate(Proficiency = as.factor(DELE_z),
Condition = if_else(condition_sum == 1, "Present", "Preterit"),
Condition = fct_relevel(Condition, "Present"),
L1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
L1 = fct_relevel(L1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = Condition, color = Condition, lty = Proficiency)) +
facet_grid(. ~ L1) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) + #'grey'
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_line(size = 0.35) +
# geom_point(aes(color = Group), size = 0.8, show.legend = T) +  #alpha = .5, pch = 15,
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# labs(color = "Weekly Spanish use") + theme_big + legend_adj +
theme_grey(base_size = 10, base_family = "Times")
prof_l1 <- fits_all_l2_dele %>%
mutate(Proficiency = as.factor(DELE_z),
Condition = if_else(condition_sum == 1, "Present", "Preterit"),
Condition = fct_relevel(Condition, "Present"),
L1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
L1 = fct_relevel(L1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = Condition, color = Condition, lty = Proficiency)) +
facet_grid(. ~ L1) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) + #'grey'
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_line(size = 0.35) +
# geom_point(aes(color = Group), size = 0.8, show.legend = T) +  #alpha = .5, pch = 15,
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# labs(color = "Weekly Spanish use") + theme_big + legend_adj +
theme_grey(base_size = 10, base_family = "Times")
# Set path for saving figs
figs_path <- here("figs", "stress", "gca")
ggsave(paste0(figs_path, "/use_cond.png"), use_cond, width = 150,
height = 120, units = "mm", dpi = 600)
ggsave(paste0(figs_path, "/use_l1.png"), use_l1, width = 150,
height = 120, units = "mm", dpi = 600)
ggsave(paste0(figs_path, "/prof_cond.png"), prof_cond, width = 150,
height = 120, units = "mm", dpi = 600)
ggsave(paste0(figs_path, "/prof_l1.png"), prof_l1, width = 150,
height = 120, units = "mm", dpi = 600)
source(here::here("scripts", "00_load_libs.R"))
# Load data
source(here::here("scripts", "02_load_data.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "stress", "gca")
stress_gc_subset <- stress50 %>%
# select(., -WM_set) %>%
filter(., time_zero >= -4 & time_zero <= 12) %>%
mutate(., l1 = fct_relevel(l1, "es", "en", "ma"),
condition_sum = if_else(cond == "1", 1, -1)) %>%       # 1 = present, 2 = past
poly_add_columns(., time_zero, degree = 3, prefix = "ot")
l2_data <- stress_gc_subset%>%
filter(., l1 != 'es') %>%
filter(., participant != 'ies04' & participant != 'ies17' & participant != 'ies28' & participant != 'aes32') %>%
mutate(., l1_sum = if_else(l1 == 'en', -1, 1))
# Base model
gca_l2_mod_base <-
lmer(eLog ~ 1 + (ot1 + ot2 + ot3) +
(1 + condition_sum + (ot1 + ot2 + ot3) | participant) +
(1 + ot1 + ot2 + ot3 | target),
control = lmerControl(optimizer = 'bobyqa',
optCtrl = list(maxfun = 2e4)),
data = l2_data, REML = F)
# add group effect to intercept, linear slope, quadratic, and cubic time terms
gca_l2_mod_l1_0 <- update(gca_l2_mod_base, . ~ . + l1_sum)
gca_l2_mod_l1_1 <- update(gca_l2_mod_l1_0, . ~ . + ot1:l1_sum)
gca_l2_mod_l1_2 <- update(gca_l2_mod_l1_1, . ~ . + ot2:l1_sum)
gca_l2_mod_l1_3 <- update(gca_l2_mod_l1_2, . ~ . + ot3:l1_sum)
l2_l1_anova <-
anova(gca_l2_mod_base, gca_l2_mod_l1_0, gca_l2_mod_l1_1,
gca_l2_mod_l1_2, gca_l2_mod_l1_3)
l2_l1_anova
gca_l2_mod_stress_0 <- update(gca_l2_mod_base,   . ~ . + condition_sum)
gca_l2_mod_stress_1 <- update(gca_l2_mod_stress_0, . ~ . + ot1:condition_sum)
gca_l2_mod_stress_2 <- update(gca_l2_mod_stress_1, . ~ . + ot2:condition_sum) # singular
gca_l2_mod_stress_3 <- update(gca_l2_mod_stress_2, . ~ . + ot3:condition_sum)
l2_stress_anova <-
anova(gca_l2_mod_l1_1, gca_l2_mod_stress_0, gca_l2_mod_stress_1,
gca_l2_mod_stress_2, gca_l2_mod_stress_3)
l2_stress_anova
l2_stress_anova <-
anova(gca_l2_mod_base, gca_l2_mod_stress_0, gca_l2_mod_stress_1,
gca_l2_mod_stress_2, gca_l2_mod_stress_3)
l2_stress_anova
gca_l2_mod_dele_0 <- update(gca_l2_mod_base,   . ~ . + DELE_z)
gca_l2_mod_dele_1 <- update(gca_l2_mod_dele_0, . ~ . + ot1:DELE_z)
gca_l2_mod_dele_2 <- update(gca_l2_mod_dele_1, . ~ . + ot2:DELE_z)
gca_l2_mod_dele_3 <- update(gca_l2_mod_dele_2, . ~ . + ot3:DELE_z)
l2_dele_anova <-
anova(gca_l2_mod_base, gca_l2_mod_dele_0, gca_l2_mod_dele_1,
gca_l2_mod_dele_2, gca_l2_mod_dele_3)
l2_dele_anova
gca_l2_mod_dele_int_0 <- update(gca_l2_mod_dele_0,   . ~ . + l1_sum:condition_sum:DELE_z)
gca_l2_mod_dele_int_1 <- update(gca_l2_mod_dele_int_0, . ~ . + ot1:l1_sum:condition_sum:DELE_z)
gca_l2_mod_dele_int_2 <- update(gca_l2_mod_dele_int_1, . ~ . + ot2:l1_sum:condition_sum:DELE_z)
gca_l2_mod_dele_int_3 <- update(gca_l2_mod_dele_int_2, . ~ . + ot3:l1_sum:condition_sum:DELE_z)
l2_dele_int_anova <-
anova(gca_l2_mod_dele_0, gca_l2_mod_dele_int_0, gca_l2_mod_dele_int_1,
gca_l2_mod_dele_int_2, gca_l2_mod_dele_int_3)
l2_dele_int_anova
gca_l2_mod_dele_final <- gca_l2_mod_dele_int_2
summary(gca_l2_mod_dele_final)
gca_l2_mod_use_0 <- update(gca_l2_mod_base,  . ~ . + use_z)
gca_l2_mod_use_1 <- update(gca_l2_mod_use_0, . ~ . + ot1:use_z)
gca_l2_mod_use_2 <- update(gca_l2_mod_use_1, . ~ . + ot2:use_z)
gca_l2_mod_use_3 <- update(gca_l2_mod_use_2, . ~ . + ot3:use_z)
l2_use_anova <-
anova(gca_l2_mod_base, gca_l2_mod_use_0, gca_l2_mod_use_1,
gca_l2_mod_use_2, gca_l2_mod_use_3)
l2_use_anova
l2_use_anova
gca_l2_mod_use_int_0 <- update(gca_l2_mod_use_2,     . ~ . + l1_sum:condition_sum:use_z)
gca_l2_mod_use_int_1 <- update(gca_l2_mod_use_int_0, . ~ . + ot1:l1_sum:condition_sum:use_z)
gca_l2_mod_use_int_2 <- update(gca_l2_mod_use_int_1, . ~ . + ot2:l1_sum:condition_sum:use_z)
gca_l2_mod_use_int_3 <- update(gca_l2_mod_use_int_2, . ~ . + ot3:l1_sum:condition_sum:use_z)
l2_use_int_anova <-
anova(gca_l2_mod_use_2, gca_l2_mod_use_int_0, gca_l2_mod_use_int_1,
gca_l2_mod_use_int_2, gca_l2_mod_use_int_3)
l2_use_int_anova
gca_l2_mod_use_final <- gca_l2_mod_use_2
mod_type <- "gca_l2_mod"
mod_spec <- c('_base',
"_l1_0", "_l1_1", "_l1_2", "_l1_3",
"_stress_0", "_stress_1", "_stress_2", "_stress_3",
"_dele_0", "_dele_1", "_dele_2", "_dele_3",
"_dele_int_0", "_dele_int_1", "_dele_int_2", "_dele_int_3",
"_use_0", "_use_1", "_use_2", "_use_3",
"_use_int_0", "_use_int_1", "_use_int_2", "_use_int_3",
'_dele_final', '_use_final')
# Store ind models in list
gca_l2_mods <- mget(c(paste0(mod_type, mod_spec)))
save(gca_l2_mods,
file = here("mods", "stress", "gca",
"gca_l2_mods_sum.Rdata"))
# Save anova model comparisons
nested_model_comparisons <-
mget(c(#"mon_cond_anova", "mon_wm_anova", "mon_int_anova",
'l2_l1_anova', 'l2_stress_anova',
'l2_dele_anova', 'l2_dele_int_anova',
'l2_use_anova', 'l2_use_int_anova'#,
#'l2_wm_anova', 'l2_wm_int_anova'
))
save(nested_model_comparisons,
file = here("mods", "stress", "gca",
"nested_model_comparisons_l2_sum.Rdata"))
source(here::here("scripts", "00_load_libs.R"))
# Load data
source(here::here("scripts", "02_load_data.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "stress", "gca")
load(paste0(gca_mods_path, "/gca_l2_mods_sum.Rdata"))
list2env(gca_l2_mods_sum, globalenv())
load("~/Desktop/Dissertation/mods/stress/gca/gca_l2_mods_sum.Rdata")
load(paste0(gca_mods_path, "/gca_l2_mods_sum.Rdata"))
list2env(gca_l2_mods_sum, globalenv())
load("~/Desktop/Dissertation/mods/stress/gca/gca_l2_mods_sum.Rdata")
gca_l2_mods_sum
stress_gc_subset <- stress50 %>%
# select(., -WM_set) %>%
filter(., time_zero >= -4 & time_zero <= 12) %>%
mutate(., l1 = fct_relevel(l1, "es", "en", "ma"),
condition_sum = if_else(cond == "1", 1, -1)) %>%       # 1 = present, 2 = past
poly_add_columns(., time_zero, degree = 3, prefix = "ot")
l2_data <- stress_gc_subset%>%
filter(., l1 != 'es') %>%
filter(., participant != 'ies04' & participant != 'ies17' & participant != 'ies28' & participant != 'aes32') %>%
mutate(., l1_sum = if_else(l1 == 'en', -1, 1))
# Base model
gca_l2_mod_base <-
lmer(eLog ~ 1 + (ot1 + ot2 + ot3) +
(1 + condition_sum + (ot1 + ot2 + ot3) | participant) +
(1 + ot1 + ot2 + ot3 | target),
control = lmerControl(optimizer = 'bobyqa',
optCtrl = list(maxfun = 2e4)),
data = l2_data, REML = F)
gca_l2_mod_dele_0 <- update(gca_l2_mod_base,   . ~ . + DELE_z)
gca_l2_mod_dele_int_0 <- update(gca_l2_mod_dele_0,   . ~ . + l1_sum:condition_sum:DELE_z)
gca_l2_mod_dele_int_1 <- update(gca_l2_mod_dele_int_0, . ~ . + ot1:l1_sum:condition_sum:DELE_z)
gca_l2_mod_dele_int_2 <- update(gca_l2_mod_dele_int_1, . ~ . + ot2:l1_sum:condition_sum:DELE_z)
gca_l2_mod_dele_final <- gca_l2_mod_dele_int_2
gca_l2_mod_use_0 <- update(gca_l2_mod_base,  . ~ . + use_z)
gca_l2_mod_use_1 <- update(gca_l2_mod_use_0, . ~ . + ot1:use_z)
gca_l2_mod_use_2 <- update(gca_l2_mod_use_1, . ~ . + ot2:use_z)
gca_l2_mod_use_final <- gca_l2_mod_use_2
summary(gca_l2_mod_dele_final)
summary(gca_l2_mod_dele_final)
summary(gca_l2_mod_use_final)
