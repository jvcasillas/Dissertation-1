labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + legend_adj_2
source(here::here("scripts", "00_load_libs.R"))
# Load data
source(here::here("scripts", "02_load_data.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "stress", "gca")
stress50
stress_gc_subset <- stress50 %>%
filter(., time_zero >= -4 & time_zero <= 12) %>%
mutate(., group = fct_relevel(group, "mon", "aes", "ams", "ies", "ims"),
condition_sum = if_else(cond == "1", 1, -1)) %>%       # 1 = present, 2 = past
poly_add_columns(., time_zero, degree = 3, prefix = "ot")
mod_ot1 <-
lmer(eLog ~ 1 + ot1 +
(1 + condition_sum + ot1 | participant),
control = lmerControl(optimizer = 'bobyqa'),   # , optCtrl=list(maxfun=2e5)
data = stress_gc_subset, weights = 1/wts, REML = F)
mod_ot2 <-
update(mod_ot1, . ~ . -(1 + condition_sum + ot1 | participant) +
ot2 + (1 + condition_sum + ot1 + ot2 | participant))
mod_ot3 <-
update(mod_ot2, . ~ . -(1 + condition_sum + ot1 + ot2 | participant) +
ot3 + (1 + condition_sum + ot1 + ot2 + ot3 | participant))
mod_ot4 <- update(mod_ot3, . ~ . + (1 | target))
anova(mod_ot1, mod_ot2, mod_ot3, mod_ot4)
anova(mod_ot1, mod_ot2, mod_ot3, mod_ot4)
# Base model
gca_full_mod_base <-
lmer(eLog ~ 1 + (ot1 + ot2 + ot3) * condition_sum +
(1 + condition_sum + (ot1 + ot2 + ot3) | participant) +
(1 | target), # + ot1 + ot2 + ot3
control = lmerControl(optimizer = 'bobyqa',
optCtrl = list(maxfun = 2e4)),
data = stress_gc_subset, REML = F)
# add group effect to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_group_0 <- update(gca_full_mod_base,   . ~ . + group)
gca_full_mod_group_1 <- update(gca_full_mod_group_0, . ~ . + ot1:group)
gca_full_mod_group_2 <- update(gca_full_mod_group_1, . ~ . + ot2:group)
gca_full_mod_group_3 <- update(gca_full_mod_group_2, . ~ . + ot3:group) # singular
anova(gca_full_mod_base, gca_full_mod_group_0, gca_full_mod_group_1,
gca_full_mod_group_2, gca_full_mod_group_3)
full_group_anova <-
anova(gca_full_mod_base, gca_full_mod_group_0, gca_full_mod_group_1,
gca_full_mod_group_2, gca_full_mod_group_3)
anova(gca_full_mod_base, gca_full_mod_group_0, gca_full_mod_group_1,
gca_full_mod_group_2, gca_full_mod_group_3)
# Get path to saved models
gca_mods_path  <- here("mods", "stress", "gca")
mod_type <- "gca_full_mod"
mod_spec <- c("_base", "_group_0", "_group_1", "_group_2", "_group_3")
# Store ind models in list
full_mods_group <- mget(c(paste0(mod_type, mod_spec)))
save(full_mods_group,
file = here("mods", "stress", "gca",
"full_mods_group.Rdata"))
# add 2-way int to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_int_0 <- update(gca_full_mod_group_2, . ~ . + group:condition_sum) # singular
gca_full_mod_int_1 <- update(gca_full_mod_int_0, . ~ . + ot1:group:condition_sum) # singular
gca_full_mod_int_2 <- update(gca_full_mod_int_1, . ~ . + ot2:group:condition_sum) # singular
gca_full_mod_int_3 <- update(gca_full_mod_int_2, . ~ . + ot3:group:condition_sum) #singular
anova(gca_full_mod_group_2, gca_full_mod_int_0, gca_full_mod_int_1,
gca_full_mod_int_2, gca_full_mod_int_3)
anova(gca_full_mod_group_2, gca_full_mod_int_0, gca_full_mod_int_1,
gca_full_mod_int_2, gca_full_mod_int_3)
full_int_anova <- anova(gca_full_mod_group_2, gca_full_mod_int_0, gca_full_mod_int_1,
gca_full_mod_int_2, gca_full_mod_int_3)
mod_spec <- c("_int_0", "_int_1", "_int_2", "_int_3")
# Store ind models in list
full_mods_int <- mget(c(paste0(mod_type, mod_spec)))
save(full_mods_int,
file = here("mods", "stress", "gca",
"full_mods_int.Rdata"))
summary(gca_full_mod_int_2) # mon reference
# Relevel for pairwise comparisons
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ams"))
gca_full_mod_int_2_ams <- update(gca_full_mod_int_2) # singular
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ims"))
gca_full_mod_int_2_ims <- update(gca_full_mod_int_2) # singular
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "aes"))
gca_full_mod_int_2_aes <- update(gca_full_mod_int_2) # singular
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ies"))
gca_full_mod_int_2_ies <- update(gca_full_mod_int_2) # singular
mod_spec <- c("_int_2_ams", "_int_2_ims", "_int_2_aes", "_int_2_ies")
# Store ind models in list
full_mods_refactor <- mget(c(paste0(mod_type, mod_spec)))
save(full_mods_refactor,
file = here("mods", "stress", "gca",
"full_mods_refactor.Rdata"))
full_mod_int_relevel_anova <- anova(gca_full_mod_int_2, gca_full_mod_int_2_ams, gca_full_mod_int_2_ims,
gca_full_mod_int_2_aes, gca_full_mod_int_2_ies)
anova(gca_full_mod_int_2, gca_full_mod_int_2_ams, gca_full_mod_int_2_ims,
gca_full_mod_int_2_aes, gca_full_mod_int_2_ies)
full_mod_int_relevel_anova <- anova(gca_full_mod_int_2, gca_full_mod_int_2_ams, gca_full_mod_int_2_ims,
gca_full_mod_int_2_aes, gca_full_mod_int_2_ies)
anova(gca_full_mod_int_2, gca_full_mod_int_2_ams, gca_full_mod_int_2_ims,
gca_full_mod_int_2_aes, gca_full_mod_int_2_ies)
# Create design dataframe for predictions
new_dat_all <- stress_gc_subset %>%
dplyr::select(group, time_zero, ot1:ot3, condition_sum) %>%
distinct
# Get model predictions and SE
fits_all <- predictSE(gca_full_mod_int_2, new_dat_all) %>%
as_tibble %>%
bind_cols(new_dat_all) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se,
group = fct_recode(group, SS = "mon", AE = "aes", IE = "ies", AM = "ams", IM = "ims"))
# Filter preds at target offset
target_offset_preds <- filter(fits_all, time_zero == 4) %>%
select(group, cond = condition_sum,
elog = fit, elog_lb = ymin, elog_ub = ymax) %>%
mutate(prob = plogis(elog),
prob_lb = plogis(elog_lb),
prob_ub = plogis(elog_ub)) %>%
arrange(group)
# Save anova model comparisons
nested_model_comparisons <-
mget(c(#"mon_cond_anova", "mon_wm_anova", "mon_int_anova",
#        "aes_cond_anova", "aes_wm_anova", "aes_int_anova",
#        "ies_cond_anova", "ies_wm_anova", "ies_int_anova",
#        "ams_cond_anova", "ams_wm_anova", "ams_int_anova",
#        "ims_cond_anova", "ims_wm_anova", "ims_int_anova",
"full_group_anova", "full_int_anova", #"full_wm_anova",
'full_mod_int_relevel_anova'))
save(nested_model_comparisons,
file = here("mods", "stress", "gca",
"nested_model_comparisons.Rdata"))
# Save models predictions
model_preds <- mget(c("fits_all", "target_offset_preds"))
save(model_preds,
file = here("mods", "stress", "gca",
"model_preds.Rdata"))
# Get path to saved models
gca_mods_path <- here("mods", "stress", "gca")
# Load models as list and store full mod to global env
load(paste0(gca_mods_path, "/full_mods_refactor.Rdata"))
load(paste0(gca_mods_path, "/model_preds.Rdata"))
list2env(full_mods_refactor, globalenv())     # gca_full_mod_int_2 final model
list2env(model_preds, globalenv())
stress50 %>%
na.omit(.) %>%
filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(., group = fct_relevel(group, "mon", "aes", "ies", "ams", "ims")) %>%
ggplot(., aes(x = time_zero, y = target_prop, fill = group, shape = group)) +
facet_grid(. ~ cond) + #, labeller = as_labeller(condition_names)) +
geom_hline(yintercept = 0.5, color = 'white', size = 3) +
geom_vline(xintercept = 0, color = 'grey40', lty = 3) +
geom_vline(xintercept = 4, color = 'grey40', lty = 3) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
scale_fill_brewer(palette = 'Set1', name = "",
labels = c("SS", "AE", "IE", "AM", "IM")) +
scale_x_continuous(breaks = c(-10, 0, 10, 20),
labels = c("-500", "0", "500", "1000")) +
labs(y = 'Proportion of target fixations',
x = 'Time relative to target syllable offset (ms)',
caption = "Mean +/- 95% CI") +
annotate("text", x = 3.3, y = 0.02, label = '200ms',
angle = 90, size = 3, hjust = 0) +
theme_grey(base_size = 12, base_family = "Times")
condition_names <- c(
`1` = 'Present',
`2` = 'Preterit'
)
stress50 %>%
na.omit(.) %>%
filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(., group = fct_relevel(group, "mon", "aes", "ies", "ams", "ims")) %>%
ggplot(., aes(x = time_zero, y = target_prop, fill = group, shape = group)) +
facet_grid(. ~ cond, labeller = as_labeller(condition_names)) +) + #, labeller = as_labeller(condition_names)) +
geom_hline(yintercept = 0.5, color = 'white', size = 3) +
geom_vline(xintercept = 0, color = 'grey40', lty = 3) +
geom_vline(xintercept = 4, color = 'grey40', lty = 3) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
scale_fill_brewer(palette = 'Set1', name = "",
labels = c("SS", "AE", "IE", "AM", "IM")) +
scale_x_continuous(breaks = c(-10, 0, 10, 20),
labels = c("-500", "0", "500", "1000")) +
labs(y = 'Proportion of target fixations',
x = 'Time relative to target syllable offset (ms)',
caption = "Mean +/- 95% CI") +
annotate("text", x = 3.3, y = 0.02, label = '200ms',
angle = 90, size = 3, hjust = 0) +
theme_grey(base_size = 12, base_family = "Times")
stress50 %>%
na.omit(.) %>%
filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(., group = fct_relevel(group, "mon", "aes", "ies", "ams", "ims")) %>%
ggplot(., aes(x = time_zero, y = target_prop, fill = group, shape = group)) +
facet_grid(. ~ cond, labeller = as_labeller(condition_names)) + #, labeller = as_labeller(condition_names)) +
geom_hline(yintercept = 0.5, color = 'white', size = 3) +
geom_vline(xintercept = 0, color = 'grey40', lty = 3) +
geom_vline(xintercept = 4, color = 'grey40', lty = 3) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
scale_fill_brewer(palette = 'Set1', name = "",
labels = c("SS", "AE", "IE", "AM", "IM")) +
scale_x_continuous(breaks = c(-10, 0, 10, 20),
labels = c("-500", "0", "500", "1000")) +
labs(y = 'Proportion of target fixations',
x = 'Time relative to target syllable offset (ms)',
caption = "Mean +/- 95% CI") +
annotate("text", x = 3.3, y = 0.02, label = '200ms',
angle = 90, size = 3, hjust = 0) +
theme_grey(base_size = 12, base_family = "Times")
stress_p1 <- stress50 %>%
na.omit(.) %>%
filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(., group = fct_relevel(group, "mon", "aes", "ies", "ams", "ims")) %>%
ggplot(., aes(x = time_zero, y = target_prop, fill = group, shape = group)) +
facet_grid(. ~ cond, labeller = as_labeller(condition_names)) + #, labeller = as_labeller(condition_names)) +
geom_hline(yintercept = 0.5, color = 'white', size = 3) +
geom_vline(xintercept = 0, color = 'grey40', lty = 3) +
geom_vline(xintercept = 4, color = 'grey40', lty = 3) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
scale_fill_brewer(palette = 'Set1', name = "",
labels = c("SS", "AE", "IE", "AM", "IM")) +
scale_x_continuous(breaks = c(-10, 0, 10, 20),
labels = c("-500", "0", "500", "1000")) +
labs(y = 'Proportion of target fixations',
x = 'Time relative to target syllable offset (ms)',
caption = "Mean +/- 95% CI") +
annotate("text", x = 3.3, y = 0.02, label = '200ms',
angle = 90, size = 3, hjust = 0) +
theme_grey(base_size = 12, base_family = "Times")
# Set path for saving figs
figs_path <- here("figs", "stress", "gca")
ggsave('stress_p1.png',
plot = stress_p1, dpi = 600, device = "png",
path = figs_path,
height = 3.5, width = 8.5, units = 'in')
model_preds$fits_all %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, color = condition)) +
facet_wrap(group ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_line(size = 0.75) +
geom_point(aes(color = condition), size = .5, show.legend = F) +
geom_point(aes(color = condition), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + legend_adj
model_preds$fits_all %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = group, color = group)) +
facet_grid(. ~ condition) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.75) +
geom_point(aes(shape = group), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(shape = group), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_color_brewer(palette = "Set1", name = "Group") +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + legend_adj_2
# Comparisons by condition
stress_p3 <- model_preds$fits_all %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = group, color = group)) +
facet_grid(. ~ condition) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
geom_line(size = 0.75) +
geom_point(aes(shape = group), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(shape = group), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
scale_color_brewer(palette = "Set1", name = "Group") +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + legend_adj_2
ggsave(paste0(figs_path, "/stress_p3.png"), stress_p3, width = 150,
height = 120, units = "mm", dpi = 600)
model_preds$fits_all %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, color = condition)) +
facet_wrap(group ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_line(size = 0.75) +
geom_point(aes(color = condition), size = .5, show.legend = F) +
geom_point(aes(color = condition), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + legend_adj
model_preds$fits_all %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, color = condition)) +
facet_wrap(group ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.y = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_line(size = 0.75) +
geom_point(aes(color = condition), size = .5, show.legend = F) +
geom_point(aes(color = condition), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + legend_adj
model_preds$fits_all %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, color = condition)) +
facet_wrap(group ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) + # you did not denote the asthetic (line, bar) you wanted. This function will computer the mean for Prob Fix
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_point(aes(color = condition), size = 1.3, show.legend = F) +
geom_point(aes(color = condition), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
# scale_color_brewer(palette = "Set1", name = "Syllable structure") +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + legend_adj
model_preds$fits_all %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, color = condition)) +
facet_wrap(group ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) + # you did not denote the asthetic (line, bar) you wanted. This function will computer the mean for Prob Fix
stat_summary(fun.x = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_point(aes(color = condition), size = 1.3, show.legend = F) +
geom_point(aes(color = condition), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
# scale_color_brewer(palette = "Set1", name = "Syllable structure") +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + legend_adj
model_preds$fits_all %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, color = condition)) +
facet_wrap(group ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) + # you did not denote the asthetic (line, bar) you wanted. This function will computer the mean for Prob Fix
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_point(aes(color = condition), size = 1.3, show.legend = F) +
geom_point(aes(color = condition), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + legend_adj
model_preds$fits_all %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, color = condition)) +
facet_wrap(group ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) + # you did not denote the asthetic (line, bar) you wanted. This function will computer the mean for Prob Fix
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_point(aes(color = condition), size = 1.3, show.legend = F) +
geom_point(aes(color = condition), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + legend_adj
ggsave(paste0(figs_path, "/stress_p2.png"), stress_p2, width = 150,
height = 120, units = "mm", dpi = 600)
# Within group differences
stress_p2 <- model_preds$fits_all %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, color = condition)) +
facet_wrap(group ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) + # you did not denote the asthetic (line, bar) you wanted. This function will computer the mean for Prob Fix
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_point(aes(color = condition), size = 1.3, show.legend = F) +
geom_point(aes(color = condition), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + legend_adj
ggsave(paste0(figs_path, "/stress_p2.png"), stress_p2, width = 150,
height = 120, units = "mm", dpi = 600)
glimpse(stress50)
rhythm <- read_csv(here("data", 'clean', "rhythm_long.csv"))
source(here::here("scripts", "00_load_libs.R"))
rhythm <- read_csv(here("data", 'clean', "rhythm_long.csv"))
glimpse(rhythm)
rhythm <- rhythm %>%
select(., -X1) %>%
rename(., rhythm_time_dev = mean_dev,
rhythm_cond = condition)
# -----------------------------------------------------------------------------
# load eye-tracking data
stress50 <- read_csv(here("data", "clean", "stress_50ms_final.csv"))
stress50 <- stress50 %>%
rename(., linx_stress = cond)
# Load pitch and rhythm data
pitch <- read_csv(here("data", 'clean', "pitch_long.csv"))
pitch <- pitch %>%
select(., -X1) %>%
rename(., pitch_rt = rt)
# Add pitch and rhythm score to eyetracking data frame
stress50_pi <- merge(x = stress50, y = pitch, by = "participant", all.x=TRUE)
stress50_mu <- merge(x = stress50_pi, y = rhythm, by = "participant", all.x=TRUE)
stress50_mu <- na.omit(stress50_mu)
write_csv(stress50_mu, here::here("data", 'clean', "music_50.csv"))
music50 <- read_csv("./data/clean/music_50.csv")
unique(music50$linx_stress)
stress_gc_subset <- music50 %>%
filter(., time_zero >= -4 & time_zero <= 12) %>%
mutate(., group = fct_relevel(group, "mon", "aes", "ams", "ies", "ims"),
condition_sum = if_else(cond == "1", 1, -1)) %>%       # 1 = present, 2 = past
poly_add_columns(., time_zero, degree = 3, prefix = "ot")
stress_gc_subset <- music50 %>%
filter(., time_zero >= -4 & time_zero <= 12) %>%
mutate(., group = fct_relevel(group, "mon", "aes", "ams", "ies", "ims"),
stress_sum = if_else(linx_stress == "1", 1, -1)) %>%       # 1 = present, 2 = past
poly_add_columns(., time_zero, degree = 3, prefix = "ot")
head(stress_gc_subset)
mod_pitch_re0 <-
lmer(pitch_rt ~ 1 +
(1 | participant) ,
control = lmerControl(optimizer = 'bobyqa'),
data = stress_gc_subset, REML = F)
mod_pitch_re1 <- update(mod_pitch_re0, . ~ . + (1 | base_note))
mod_pitch_re2 <- update(mod_pitch_re1, . ~ . + (1 | direction))
anova(mod_pitch_re0, mod_pitch_re1, mod_pitch_re2)
anova(mod_pitch_re0, mod_pitch_re1, mod_pitch_re2)
mod_rhythm_re0 <-
lmer(rhythm_time_dev ~ 1 +
(1 | participant) ,
control = lmerControl(optimizer = 'bobyqa'),
data = stress_gc_subset, REML = F)
mod_rhythm_re1 <- update(mod_rhythm_re0, . ~ . + (1 | rhythm_cond))
anova(mod_rhythm_re0, mod_rhythm_re1)
anova(mod_rhythm_re0, mod_rhythm_re1)
summary(mod_pitch_re2)
stress_gc_subset <- music50 %>%
filter(., time_zero >= -4 & time_zero <= 12) %>%
mutate(., group = fct_relevel(group, "mon", "aes", "ams", "ies", "ims"),
stress_sum = if_else(linx_stress == "1", 1, -1),            # 1 = present, 2 = preterit
base_note = fct_relevel(base_note, "DO", "MI", "SOL"),
dir_sum = if_else(direction == "up", 1, -1),
rhy_pattern = fct_relevel(rhythm_cond, "unpredictable", "spondee",
"stressed_spondee", "trochee")) %>%
poly_add_columns(., time_zero, degree = 3, prefix = "ot")
mod_pitch_re0 <-
lmer(pitch_rt ~ 1 +
(1 | participant) ,
control = lmerControl(optimizer = 'bobyqa'),
data = stress_gc_subset, REML = F)
mod_pitch_re1 <- update(mod_pitch_re0, . ~ . + (1 | base_note))
mod_pitch_re2 <- update(mod_pitch_re1, . ~ . + (1 | dir_sum))
anova(mod_pitch_re0, mod_pitch_re1, mod_pitch_re2)
mod_rhythm_re0 <-
lmer(rhythm_time_dev ~ 1 +
(1 | participant) ,
control = lmerControl(optimizer = 'bobyqa'),
data = stress_gc_subset, REML = F)
mod_rhythm_re1 <- update(mod_rhythm_re0, . ~ . + (1 | rhy_pattern))
anova(mod_rhythm_re0, mod_rhythm_re1)
summary(mod_pitch_re2)
