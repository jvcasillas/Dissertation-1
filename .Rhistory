gca_full_mod_base <-
lmer(eLog ~ 1 + (ot1 + ot2 + ot3) +
(1 + stress_sum * (ot1 + ot2 + ot3) | participant) +
(1 + ot1 + ot2 + ot3 | target),
control = lmerControl(optimizer = 'bobyqa',
optCtrl = list(maxfun = 2e4)),
data = stress_gc_subset, REML = F)    # , na.action = na.exclude
# add group effect to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_group_0 <- update(gca_full_mod_base,    . ~ . + group)
gca_full_mod_group_1 <- update(gca_full_mod_group_0, . ~ . + ot1:group)
# Base model
gca_full_mod_base <-
lmer(eLog ~ 1 + (ot1 + ot2 + ot3) +
(1 + stress_sum * (ot1 + ot2 + ot3) | participant) +
(1 + ot1 + ot2 + ot3 | target),
control = lmerControl(optimizer = 'bobyqa'), # ,optCtrl = list(maxfun = 2e4)
data = stress_gc_subset, REML = F)    # , na.action = na.exclude
# Base model
gca_full_mod_base <-
lmer(eLog ~ 1 + (ot1 + ot2 + ot3) +
(1 + stress_sum * (ot1 + ot2 + ot3) | participant) +
(1 + ot1 + ot2 + ot3 | target),
control = lmerControl(optimizer = 'bobyqa',
optCtrl = list(maxfun = 3e5)),
data = stress_gc_subset, REML = F)    # , na.action = na.exclude
# add group effect to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_group_0 <- update(gca_full_mod_base,    . ~ . + group)
gca_full_mod_group_1 <- update(gca_full_mod_group_0, . ~ . + ot1:group)
gca_full_mod_group_2 <- update(gca_full_mod_group_1, . ~ . + ot2:group)
gca_full_mod_group_3 <- update(gca_full_mod_group_2, . ~ . + ot3:group)
full_group_anova <-
anova(gca_full_mod_base, gca_full_mod_group_0, gca_full_mod_group_1,
gca_full_mod_group_2, gca_full_mod_group_3)
full_group_anova
mod_type <- "gca_full_mod"
mod_spec <- c("_base", "_group_0", "_group_1", "_group_2", "_group_3")
group_mods <- mget(c(paste0(mod_type, mod_spec)))
save(group_mods,
file = here("mods", "vision", "gca",
"group_mods.Rdata"))
gca_full_mod_car_0 <- update(gca_full_mod_group_2,    . ~ . + car_dev)
gca_full_mod_car_1 <- update(gca_full_mod_car_0, . ~ . + ot1:car_dev)
gca_full_mod_car_2 <- update(gca_full_mod_car_1, . ~ . + ot2:car_dev)
gca_full_mod_car_3 <- update(gca_full_mod_car_2, . ~ . + ot3:car_dev)
full_car_anova <-
anova(gca_full_mod_group_2, gca_full_mod_car_0, gca_full_mod_car_1,
gca_full_mod_car_2, gca_full_mod_car_3)
full_car_anova
mod_spec <- c("_car_0", "_car_1", "_car_2", "_car_3")
group_mods <- mget(c(paste0(mod_type, mod_spec)))
car_mods <- mget(c(paste0(mod_type, mod_spec)))
save(car_mods,
file = here("mods", "vision", "gca",
"car_mods.Rdata"))
gca_full_mod_ospan_0 <- update(gca_full_mod_group_2, . ~ . + WM_set)
gca_full_mod_ospan_1 <- update(gca_full_mod_ospan_0, . ~ . + ot1:WM_set)
mod_start <- "gca_mod_"
mod_spec <- c("_base", "_cond_0", "_cond_1", "_cond_2", "_cond_3",
"_wm_0", "_wm_1", "_wm_2", "_wm_3",
"_car_0", "_car_1", "_car_2", "_car_3",
"_corsi_0", "_corsi_1", "_corsi_2", "_corsi_3")
# Store ind models in list
ind_mods <- mget(c(paste0(mod_start, "mon", mod_spec),
paste0(mod_start, "aes", mod_spec),
paste0(mod_start, "ies", mod_spec),
paste0(mod_start, "ams", mod_spec),
paste0(mod_start, "ims", mod_spec)
))
save(ind_mods,
file = here("mods", "vision", "gca",
"individual_mods.Rdata"))
gca_full_mod_ospan_2 <- update(gca_full_mod_ospan_1, . ~ . + ot2:WM_set)
gca_full_mod_ospan_3 <- update(gca_full_mod_ospan_2, . ~ . + ot3:WM_set)
full_ospan_anova <-
anova(gca_full_mod_group_2, gca_full_mod_ospan_0, gca_full_mod_ospan_1,
gca_full_mod_ospan_2, gca_full_mod_ospan_3)
full_ospan_anova
mod_spec <- c("_ospan_0", "_ospan_1", "_ospan_2", "_ospan_3")
ospan_mods <- mget(c(paste0(mod_type, mod_spec)))
save(ospan_mods,
file = here("mods", "vision", "gca",
"ospan_mods.Rdata"))
gca_full_mod_corsi_0 <- update(gca_full_mod_group_2, . ~ . + corsi_pt)
gca_full_mod_corsi_1 <- update(gca_full_mod_corsi_0, . ~ . + ot1:corsi_pt)
gca_full_mod_corsi_2 <- update(gca_full_mod_corsi_1, . ~ . + ot2:corsi_pt)
gca_full_mod_corsi_3 <- update(gca_full_mod_corsi_2, . ~ . + ot3:corsi_pt)
full_corsi_anova <-
anova(gca_full_mod_group_2, gca_full_mod_corsi_0, gca_full_mod_corsi_1,
gca_full_mod_corsi_2, gca_full_mod_corsi_3)
full_corsi_anova
mod_spec <- c("_corsi_0", "_corsi_1", "_corsi_2", "_corsi_3")
corsi_mods <- mget(c(paste0(mod_type, mod_spec)))
save(corsi_mods,
file = here("mods", "vision", "gca",
"corsi_mods.Rdata"))
# add 3-way int to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_int_0 <- update(gca_full_mod_corsi_3, . ~ . + stress_sum:pitch_dev:group)
# add 3-way int to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_int_0 <- update(gca_full_mod_corsi_3, . ~ . + stress_sum:car_dev:group)
gca_full_mod_int_1 <- update(gca_full_mod_int_0,   . ~ . + ot1:stress_sum:car_dev:group)
gca_full_mod_int_2 <- update(gca_full_mod_int_1,   . ~ . + ot2:stress_sum:car_dev:group)
gca_full_mod_int_3 <- update(gca_full_mod_int_2,   . ~ . + ot3:stress_sum:car_dev:group)
full_int_a_anova <-
anova(gca_full_mod_mod_3, gca_full_mod_int_0, gca_full_mod_int_1,
gca_full_mod_int_2, gca_full_mod_int_3)
full_int_a_anova <-
anova(gca_full_mod_corsi_3, gca_full_mod_int_0, gca_full_mod_int_1,
gca_full_mod_int_2, gca_full_mod_int_3)
full_int_a_anova
# add 3-way int to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_int_4 <- update(gca_full_mod_int_0,   . ~ . + WM_set:corsi_pt:group)
gca_full_mod_int_5 <- update(gca_full_mod_int_4,   . ~ . + ot1:WM_set:corsi_pt:group)
gca_full_mod_int_5 <- update(gca_full_mod_int_4,   . ~ . + ot1:WM_set:corsi_pt:group)
gca_full_mod_int_6 <- update(gca_full_mod_int_5,   . ~ . + ot2:WM_set:corsi_pt:group)
gca_full_mod_int_7 <- update(gca_full_mod_int_6,   . ~ . + ot3:WM_set:corsi_pt:group)
full_int_anova <-
anova(gca_full_mod_int_0, gca_full_mod_int_4, gca_full_mod_int_5,
gca_full_mod_int_6, gca_full_mod_int_7)
full_int_b_anova <-
anova(gca_full_mod_int_0, gca_full_mod_int_4, gca_full_mod_int_5,
gca_full_mod_int_6, gca_full_mod_int_7)
full_int_b_anova
mod_spec <- c("_int_0", "_int_1", "_int_2", "_int_3", "_int_4", "_int_5", "_int_6", "_int_7")
int0_7_mods <- mget(c(paste0(mod_type, mod_spec)))
save(int0_7_mods,
file = here("mods", "vision", "gca",
"interactions_0to7_mods.Rdata"))
gca_full_mod_int_complex <- update(gca_full_mod_corsi_3, . ~ . + stress_sum:car_dev:group:WM_set:corsi_pt)
gca_full_mod_int_complex_1 <- update(gca_full_mod_complex, . ~ . + ot1:stress_sum:car_dev:group:WM_set:corsi_pt)
gca_full_mod_int_complex_1 <- update(gca_full_mod_int_complex, . ~ . + ot1:stress_sum:car_dev:group:WM_set:corsi_pt)
gca_full_mod_int_complex_0 <- gca_full_mod_int_complex
gca_full_mod_int_complex_2 <- update(gca_full_mod_int_complex_1, . ~ . + ot2:stress_sum:car_dev:group:WM_set:corsi_pt)
gca_full_mod_int_complex_3 <- update(gca_full_mod_int_complex_2, . ~ . + ot3:stress_sum:car_dev:group:WM_set:corsi_pt)
full_int_complex_anova <-
anova(gca_full_mod_corsi_3, gca_full_mod_int_complex_0, gca_full_mod_int_complex_1,
gca_full_mod_int_complex_2, gca_full_mod_int_complex_3)
full_int_complex_anova
gca_full_mod_base_0 <-
lmer(eLog ~ 1 + stress_sum * car_dev * WM_set * corsi_pt * (ot1 + ot2 + ot3) +
(1 + stress_sum * (ot1 + ot2 + ot3) | participant) +
(1 + ot1 + ot2 + ot3 | target),
control = lmerControl(optimizer = 'bobyqa',
optCtrl = list(maxfun = 3e5)),
data = stress_gc_subset, REML = F)
gca_full_mod_base <- gca_full_mod_base_0
# add group effect to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_group_0 <- update(gca_full_mod_base,    . ~ . + group)
gca_full_mod_group_1 <- update(gca_full_mod_group_0, . ~ . + ot1:group)
gca_full_mod_group_2 <- update(gca_full_mod_group_1, . ~ . + ot2:group)
gca_full_mod_group_3 <- update(gca_full_mod_group_2, . ~ . + ot3:group)
full_group_anova <-
anova(gca_full_mod_base, gca_full_mod_group_0, gca_full_mod_group_1,
gca_full_mod_group_2, gca_full_mod_group_3)
full_group_anova
51 219012 219450 -109455   218910
# gca_full_mod_group_0   55 218994 219466 -109442   218884 26.2291  4  2.845e-05 ***
# gca_full_mod_group_1   59 218992 219499 -109437   218874  9.7696  4    0.04449 *
# gca_full_mod_group_2   63 218971 219512 -109422   218845 29.5919  4  5.926e-06 *
mod_type <- "gca_full_mod"
mod_spec <- c("_base", "_group_0", "_group_1", "_group_2", "_group_3")
group_mods <- mget(c(paste0(mod_type, mod_spec)))
# add 3-way int to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_int_0 <- update(gca_full_mod_corsi_3, . ~ . + stress_sum:car_dev:group:WM_set:corsi_pt)
save(group_mods,
file = here("mods", "vision", "gca",
"group_mods.Rdata"))
# add 3-way int to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_int_0 <- update(gca_full_mod_group_2, . ~ . + stress_sum:car_dev:group:WM_set:corsi_pt)
summary(gca_full_mod_base)
anova(gca_full_mod_base, gca_full_mod_base_0)
gca_full_mod_int_1 <- update(gca_full_mod_int_0,   . ~ . + ot1:stress_sum:car_dev:group:WM_set:corsi_pt)
gca_full_mod_int_2 <- update(gca_full_mod_int_1,   . ~ . + ot2:stress_sum:car_dev:group:WM_set:corsi_pt)
gca_full_mod_int_3 <- update(gca_full_mod_int_2,   . ~ . + ot3:stress_sum:car_dev:group:WM_set:corsi_pt)
full_int_anova <-
anova(gca_full_mod_group_2, gca_full_mod_int_0, gca_full_mod_int_1,
gca_full_mod_int_2, gca_full_mod_int_3)
full_int_anova
summary(gca_full_mod_group_2)
# Relevel for pairwise comparisons
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "aes"))
gca_full_mod_aes_relevel <- update(gca_full_mod_group_2)
mod_spec <- c("_int_0", "_int_1", "_int_2", "_int_3")
int_mods <- mget(c(paste0(mod_type, mod_spec)))
save(int_mods,
file = here("mods", "vision", "gca",
"interaction_mods.Rdata"))
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ams"))
gca_full_mod_ams_relevel <- update(gca_full_mod_group_2)
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ies"))
gca_full_mod_ies_relevel <- update(gca_full_mod_group_2)
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ims"))
gca_full_mod_ims_relevel <- update(gca_full_mod_group_2)
mod_spec <- "relevel"
# Store ind models in list
relevel_final_mods <- mget(c(gca_full_mod_group_2,
paste0(mod_type, "aes", mod_spec),
paste0(mod_type, "ies", mod_spec),
paste0(mod_type, "ams", mod_spec),
paste0(mod_type, "ims", mod_spec)
))
# Store ind models in list
relevel_final_mods <- mget(c(
paste0(mod_type, "aes", mod_spec),
paste0(mod_type, "ies", mod_spec),
paste0(mod_type, "ams", mod_spec),
paste0(mod_type, "ims", mod_spec)
))
mod_spec <- "_relevel"
# Store ind models in list
relevel_final_mods <- mget(c(
paste0(mod_type, "_aes", mod_spec),
paste0(mod_type, "_ies", mod_spec),
paste0(mod_type, "_ams", mod_spec),
paste0(mod_type, "_ims", mod_spec)
))
save(relevel_final_mods,
file = here("mods", "vision", "gca",
"final_mods.Rdata")) # will contain full model + relevel for pairwise comparison
save(relevel_final_mods,
file = here("mods", "vision", "gca",
"relevel_final_mods.Rdata"))
names(stress_gc_subset)
# Create design dataframe for predictions
new_dat_all <- stress_gc_subset %>%
dplyr::select(group, time_zero, ot1:ot3, stress_sum,
WM_set, cat_dev, corsi_pt) %>%
distinct
# Create design dataframe for predictions
new_dat_all <- stress_gc_subset %>%
dplyr::select(group, time_zero, ot1:ot3, stress_sum,
WM_set, car_dev, corsi_pt) %>%
distinct
# Get model predictions and SE
fits_all <- predictSE(gca_full_mod_group_2, new_dat_all) %>%        #change depending on significance
as_tibble %>%
bind_cols(new_dat_all) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se,
group = fct_recode(group, SS = "mon", AE = "aes", IE = "ies", AM = "ams", IM = "ims"))
# Filter preds at target offset
target_offset_preds <- filter(fits_all, time_zero == 4) %>%
select(group, stress = stress_sum,
elog = fit, elog_lb = ymin, elog_ub = ymax) %>%
mutate(prob = plogis(elog),
prob_lb = plogis(elog_lb),
prob_ub = plogis(elog_ub)) %>%
arrange(group)
# Save anova model comparisons
nested_model_comparisons <-
mget(c("mon_cond_anova", "mon_wm_anova", "mon_car_anova", "mon_corsi_anova",
"aes_cond_anova", "aes_wm_anova", "aes_car_anova", "aes_corsi_anova",
"ies_cond_anova", "ies_wm_anova", "ies_car_anova", "ies_corsi_anova",
"ams_cond_anova", "ams_wm_anova", "ams_car_anova", "ams_corsi_anova",
"ims_cond_anova", "ims_wm_anova", "ims_car_anova", "ims_corsi_anova",
"full_group_anova", "full_int_anova"))
save(nested_model_comparisons,
file = here("mods", "vision", "gca",
"nested_model_comparisons.Rdata"))
# Save models predictions
model_preds <- mget(c("fits_all", "target_offset_preds"))
save(model_preds,
file = here("mods", "vision", "gca",
"model_preds.Rdata"))
# Base model rhythm
gca_full_mod_rhythm_base <-
lmer(eLog ~ 1 + stress_sum * rhythm_dev * (ot1 + ot2 + ot3) +
(1 + stress_sum + (ot1 + ot2 + ot3) | participant) +
(1 + ot1 + ot2 + ot3 | target),
control = lmerControl(optimizer = 'bobyqa',
optCtrl = list(maxfun = 2e4)),
data = stress_gc_subset, REML = F) # , na.action = na.exclude
# Load data
source(here::here("scripts", "02_load_data.R"))
auditory <- read_csv("./data/clean/auditory_scores.csv")
auditory <- auditory %>%
select(., -X1)
music50 <- merge(x = stress50, y = auditory, by = "participant", all.x=TRUE)
music50 <- na.omit(music50)
stress_gc_subset <- music50 %>%
filter(., time_zero >= -4 & time_zero <= 12) %>%
mutate(., group = fct_relevel(group, "mon", "aes", "ams", "ies", "ims"),
stress_sum = if_else(cond == "1", 1, -1)) %>%           # 1 = present, 2 = preterit
poly_add_columns(., time_zero, degree = 3, prefix = "ot")
# Base model rhythm
gca_full_mod_rhythm_base <-
lmer(eLog ~ 1 + stress_sum * rhythm_dev * (ot1 + ot2 + ot3) +
(1 + stress_sum + (ot1 + ot2 + ot3) | participant) +
(1 + ot1 + ot2 + ot3 | target),
control = lmerControl(optimizer = 'bobyqa',
optCtrl = list(maxfun = 2e4)),
data = stress_gc_subset, REML = F) # , na.action = na.exclude
# add group effect to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_rhythm_group_0 <- update(gca_full_mod_rhythm_base,    . ~ . + group)
gca_full_mod_rhythm_group_1 <- update(gca_full_mod_rhythm_group_0, . ~ . + ot1:group)
gca_full_mod_rhythm_group_2 <- update(gca_full_mod_rhythm_group_1, . ~ . + ot2:group)
gca_full_mod_rhythm_group_3 <- update(gca_full_mod_rhythm_group_2, . ~ . + ot3:group)
full_rhythm_group_anova <-
anova(gca_full_mod_rhythm_base, gca_full_mod_rhythm_group_0, gca_full_mod_rhythm_group_1,
gca_full_mod_rhythm_group_2, gca_full_mod_rhythm_group_3)
full_rhythm_group_anova
mod_type <- "gca_full_mod_rhythm_"
mod_spec <- c("_base", "_group_0", "_group_1", "_group_2", "_group_3")
# Store ind models in list
rhythm_group_mods <- mget(c(paste0(mod_type, mod_spec)
))
mod_type <- "gca_full_mod_rhythm"
mod_spec <- c("_base", "_group_0", "_group_1", "_group_2", "_group_3")
# Store ind models in list
rhythm_group_mods <- mget(c(paste0(mod_type, mod_spec)
))
save(rhythm_group_mods,
file = here("mods", "music", "gca",
"rhythm_group_mods.Rdata"))
# add 3-way int to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_rhythm_int_0 <- update(gca_full_mod_rhythm_group_2, . ~ . + stress_sum:rhythm_dev:group)
gca_full_mod_rhythm_int_1 <- update(gca_full_mod_rhythm_int_0,   . ~ . + ot1:stress_sum:rhythm_dev:group)
gca_full_mod_rhythm_int_2 <- update(gca_full_mod_rhythm_int_1,   . ~ . + ot2:stress_sum:rhythm_dev:group)
gca_full_mod_rhythm_int_3 <- update(gca_full_mod_rhythm_int_2,   . ~ . + ot3:stress_sum:rhythm_dev:group)
full_rhythm_int_anova <-
anova(gca_full_mod_rhythm_group_2, gca_full_mod_rhythm_int_0, gca_full_mod_rhythm_int_1,
gca_full_mod_rhythm_int_2, gca_full_mod_rhythm_int_3)
full_rhythm_int_anova
summary(gca_full_mod_rhythm_int_3)
# Relevel for pairwise comparisons
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ams"))
mod_type <- "gca_full_mod_rhythm"
mod_spec <- c("_base", "_group_0", "_group_1", "_group_2", "_group_3",
"_int_0", "_int_1", "_int_2", "_int_3")
# Store ind models in list
rhythm_mods <- mget(c(paste0(mod_type, mod_spec)
))
save(rhythm_mods,
file = here("mods", "music", "gca",
"rhythm_mods.Rdata"))
gca_full_mod_rhythm_int_3_ams <- update(gca_full_mod_rhythm_int_3)
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ims"))
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ims"))
gca_full_mod_rhythm_int_3_ims <- update(gca_full_mod_rhythm_int_3)
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ies"))
gca_full_mod_rhythm_int_3_ies <- update(gca_full_mod_rhythm_int_3)
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "aes"))
gca_full_mod_rhythm_int_3_aes <- update(gca_full_mod_rhythm_int_3)
gca_full_mod_rhythm_int_3_aes <- update(gca_full_mod_rhythm_int_3)
# Base model rhythm
gca_full_mod_rhythm_base <-
lmer(eLog ~ 1 + stress_sum * rhythm_dev * (ot1 + ot2 + ot3) +
(1 + stress_sum + (ot1 + ot2 + ot3) | participant) +
(1 + ot1 + ot2 + ot3 | target),
control = lmerControl(optimizer = 'bobyqa',
optCtrl = list(maxfun = 3e5)),
data = stress_gc_subset, REML = F) # , na.action = na.exclude
# add group effect to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_rhythm_group_0 <- update(gca_full_mod_rhythm_base,    . ~ . + group)
# Load data
source(here::here("scripts", "02_load_data.R"))
auditory <- read_csv("./data/clean/auditory_scores.csv")
auditory <- auditory %>%
select(., -X1)
music50 <- merge(x = stress50, y = auditory, by = "participant", all.x=TRUE)
music50 <- na.omit(music50)
stress_gc_subset <- music50 %>%
filter(., time_zero >= -4 & time_zero <= 12) %>%
mutate(., group = fct_relevel(group, "mon", "aes", "ams", "ies", "ims"),
stress_sum = if_else(cond == "1", 1, -1)) %>%           # 1 = present, 2 = preterit
poly_add_columns(., time_zero, degree = 3, prefix = "ot")
# Base model rhythm
gca_full_mod_rhythm_base <-
lmer(eLog ~ 1 + stress_sum * rhythm_dev * (ot1 + ot2 + ot3) +
(1 + stress_sum + (ot1 + ot2 + ot3) | participant) +
(1 + ot1 + ot2 + ot3 | target),
control = lmerControl(optimizer = 'bobyqa',
optCtrl = list(maxfun = 3e5)),
data = stress_gc_subset, REML = F) # , na.action = na.exclude
# add group effect to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_rhythm_group_0 <- update(gca_full_mod_rhythm_base,    . ~ . + group)
gca_full_mod_rhythm_group_1 <- update(gca_full_mod_rhythm_group_0, . ~ . + ot1:group)
gca_full_mod_rhythm_group_2 <- update(gca_full_mod_rhythm_group_1, . ~ . + ot2:group)
gca_full_mod_rhythm_group_3 <- update(gca_full_mod_rhythm_group_2, . ~ . + ot3:group)
full_rhythm_group_anova <-
anova(gca_full_mod_rhythm_base, gca_full_mod_rhythm_group_0, gca_full_mod_rhythm_group_1,
gca_full_mod_rhythm_group_2, gca_full_mod_rhythm_group_3)
mod_type <- "gca_full_mod_rhythm"
mod_spec <- c("_base", "_group_0", "_group_1", "_group_2", "_group_3")
# Store ind models in list
rhythm_mods <- mget(c(paste0(mod_type, mod_spec)
))
save(rhythm_mods,
file = here("mods", "music", "gca",
"rhythm_mods.Rdata"))
full_rhythm_group_anova
# add 3-way int to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_rhythm_int_0 <- update(gca_full_mod_rhythm_group_2, . ~ . + stress_sum:rhythm_dev:group)
gca_full_mod_rhythm_int_1 <- update(gca_full_mod_rhythm_int_0,   . ~ . + ot1:stress_sum:rhythm_dev:group)
gca_full_mod_rhythm_int_2 <- update(gca_full_mod_rhythm_int_1,   . ~ . + ot2:stress_sum:rhythm_dev:group)
gca_full_mod_rhythm_int_3 <- update(gca_full_mod_rhythm_int_2,   . ~ . + ot3:stress_sum:rhythm_dev:group)
full_rhythm_int_anova <-
anova(gca_full_mod_rhythm_group_2, gca_full_mod_rhythm_int_0, gca_full_mod_rhythm_int_1,
gca_full_mod_rhythm_int_2, gca_full_mod_rhythm_int_3)
full_rhythm_int_anova
summary(gca_full_mod_rhythm_int_3)
mod_spec <- c("_base", "_group_0", "_group_1", "_group_2", "_group_3",
"_int_0", "_int_1", "_int_2", "_int_3")
# Store ind models in list
rhythm_mods <- mget(c(paste0(mod_type, mod_spec)
))
save(rhythm_mods,
file = here("mods", "music", "gca",
"rhythm_mods.Rdata"))
# Relevel for pairwise comparisons
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ams"))
gca_full_mod_rhythm_int_3_ams <- update(gca_full_mod_rhythm_int_3)
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ims"))
gca_full_mod_rhythm_int_3_ims <- update(gca_full_mod_rhythm_int_3)
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ies"))
gca_full_mod_rhythm_int_3_ies <- update(gca_full_mod_rhythm_int_3)
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "aes"))
gca_full_mod_rhythm_int_3_aes <- update(gca_full_mod_rhythm_int_3)
gca_full_mod_rhythm_int_3_aes
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "mon"))
mod_type <- "gca_full_mod_rhythm"
mod_spec <- c("_base", "_group_0", "_group_1", "_group_2", "_group_3",
"_int_0", "_int_1", "_int_2", "_int_3",
"_int_3_ams", "_int_3_ims", "_int_3_aes", "_int_3_ies")
# Store ind models in list
rhythm_mods <- mget(c(paste0(mod_type, mod_spec)
))
save(rhythm_mods,
file = here("mods", "music", "gca",
"rhythm_mods.Rdata"))
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "aes"))
gca_full_mod_rhythm_int_3_aes <- update(gca_full_mod_rhythm_int_3)
mod_type <- "gca_full_mod_rhythm"
mod_spec <- c("_base", "_group_0", "_group_1", "_group_2", "_group_3",
"_int_0", "_int_1", "_int_2", "_int_3",
"_int_3_ams", "_int_3_ims", "_int_3_aes", "_int_3_ies")
# Store ind models in list
rhythm_mods <- mget(c(paste0(mod_type, mod_spec)
))
save(rhythm_mods,
file = here("mods", "music", "gca",
"rhythm_mods.Rdata"))
# Create design dataframe for predictions
new_dat_all <- stress_gc_subset %>%
dplyr::select(group, time_zero, ot1:ot3, stress_sum, pitch_dev,
rhythm_dev) %>%
distinct
# Get model predictions and SE
fits_all_pitch <- predictSE(gca_full_mod_pitch_int_2, new_dat_all) %>%        #change depending on significance
as_tibble %>%
bind_cols(new_dat_all) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se,
group = fct_recode(group, SS = "mon", AE = "aes", IE = "ies", AM = "ams", IM = "ims"))
fits_all_rhythm <- predictSE(gca_full_mod_rhythm_int_3, new_dat_all) %>%        #change depending on significance
as_tibble %>%
bind_cols(new_dat_all) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se,
group = fct_recode(group, SS = "mon", AE = "aes", IE = "ies", AM = "ams", IM = "ims"))
# Filter preds at target offset
target_offset_preds_rhythm <- filter(fits_all_rhythm, time_zero == 4) %>%
select(group, cond = stress_sum, rhythm_dev,
elog = fit, elog_lb = ymin, elog_ub = ymax) %>%
mutate(prob = plogis(elog),
prob_lb = plogis(elog_lb),
prob_ub = plogis(elog_ub)) %>%
arrange(group)
# # Get path to saved models
# gca_mods_path  <- here("reports", "mods", "gca")
#
# # Load models as lists
# load(paste0(gca_mods_path, "/ind_mods.Rdata"))
load(paste0(gca_mods_path, "/pitch_mods.Rdata"))
# Get path to saved models
gca_mods_path  <- here("mods", "music", "gca")
# Load models as lists
# load(paste0(gca_mods_path, "/ind_mods.Rdata"))
load(paste0(gca_mods_path, "/pitch_mods.Rdata"))
# load(paste0(gca_mods_path, "/nested_model_comparisons.Rdata"))
# load(paste0(gca_mods_path, "/model_preds.Rdata"))
#
# # Store objects in global env
# list2env(ind_mods, globalenv())
list2env(pitch_mods, globalenv())
# Get model predictions and SE
fits_all_pitch <- predictSE(gca_full_mod_pitch_int_2, new_dat_all) %>%        #change depending on significance
as_tibble %>%
bind_cols(new_dat_all) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se,
group = fct_recode(group, SS = "mon", AE = "aes", IE = "ies", AM = "ams", IM = "ims"))
# Filter preds at target offset
target_offset_preds_pitch <- filter(fits_all_pitch, time_zero == 4) %>%
select(group, stress = stress_sum, pitch_dev,
elog = fit, elog_lb = ymin, elog_ub = ymax) %>%
mutate(prob = plogis(elog),
prob_lb = plogis(elog_lb),
prob_ub = plogis(elog_ub)) %>%
arrange(group)
target_offset_preds_rhythm <- filter(fits_all_rhythm, time_zero == 4) %>%
select(group, stress = stress_sum, rhythm_dev,
elog = fit, elog_lb = ymin, elog_ub = ymax) %>%
mutate(prob = plogis(elog),
prob_lb = plogis(elog_lb),
prob_ub = plogis(elog_ub)) %>%
arrange(group)
# Save models predictions
model_preds <- mget(c("fits_all_pitch", 'fits_all_rhythm',
"target_offset_preds_pitch", 'target_offset_preds_rhythm'))
save(model_preds,
file = here("mods", "music", "gca",
"model_preds.Rdata"))
