params <- gca_l2_mods$gca_l2_mod_dele_final %>%
tidy_lme4() %>%
rename(B = Estimate)
params$subscript <-
c(paste0(0:5, 0), paste0(0:5, 1),
paste0(0:4, 2))
params <- tibble::column_to_rownames(params, 'subscript')
params$subscript <-
c(paste0(0:5, 0), paste0(0:5, 1),
paste0(0:5, 2))
params$subscript <-
c(paste0(0:5, 0), paste0(0:5, 1),
paste0(0:4, 2))
# Shortcut for inline reporting from the above table
report_row <- function(row_name) report_fixef_row(params, row_name)
knitr::include_graphics(
here("figs", "stress", "gca", "stress_dele_cond_tog.png")
)
knitr::include_graphics(
here("figs", "stress", "gca", "stress_dele_l1_tog.png")
)
knitr::include_graphics(
here("figs", "stress", "gca", "stress_dele_l1_tog.png")
)
knitr::include_graphics(
here("figs", "stress", "gca", "stress_dele_cond_tog.png")
)
params <- gca_l2_mods$gca_l2_mod_use_final %>%
tidy_lme4() %>%
rename(B = Estimate)
params$subscript <-
c(paste0(0:4, 0), paste0(0:4, 1),
paste0(0:4, 2), paste0(0:3, 3))
params <- tibble::column_to_rownames(params, 'subscript')
params$subscript <-
c(paste0(0:4, 0), paste0(0:4, 1),
paste0(0:4, 2), paste0(0:3, 3))
# Shortcut for inline reporting from the above table
report_row <- function(row_name) report_fixef_row(params, row_name)
# Get full mod and make it pretty for the table
pretty_fixed_effects <- gca_l2_mods$gca_l2_mod_use_final %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:3, 0), paste0(0:3, 1),
paste0(0:2, 2))
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects$Parameter %<>% paste(., var_labels)
pretty_fixed_effects %>%
select(-effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
knitr::include_graphics(
here("figs", "stress", "gca", "stress_use_cond_tog.png")
)
knitr::include_graphics(
here("figs", "stress", "gca", "stress_use_cond_tog.png")
)
knitr::include_graphics(
here("figs", "stress", "gca", "stress_use_l1_tog.png")
)
knitr::include_graphics(
here("figs", "stress", "gca", "stress_use_split.png")
)
# Get full mod and make it pretty for the table
l2_onset_c3_dele_z %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
glmm_mods_path  <- here("mods", "stress", "glmm")
l2_onset_c3_dele <- readRDS(here("mods", "stress", "glmm", "onset_c3", "l2_onset_c3_dele_final_z.rds"))
l2_onset_c3_use <- readRDS(here("mods", "stress", "glmm", "onset_c3", "l2_onset_c3_use_final_z.rds"))
# Get full mod and make it pretty for the table
l2_onset_c3_dele_z %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
# Get full mod and make it pretty for the table
l2_onset_c3_dele %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
# Get full mod and make it pretty for the table
l2_onset_c3_use %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
# Load data
#dem_all <- read_csv(here::here("data", "clean", "ospan_set_z_scores.csv"))
dem_all <- read_csv(here::here("data", "pupurri_analysis.csv"))
dem_all <- dem_all %>%
# separate(., col = participant,
#          into = c('group', 'id'),
#          sep = 3,
#          remove = FALSE) %>%
separate(., col = group,
into = c("proficiency", "l1"), # es = EN speaker, ms = MA speaker, on = ES speaker
sep = 1,
remove = FALSE)
dem_all$l1 <- str_replace(dem_all$l1, "es", "en")
dem_all$l1 <- str_replace(dem_all$l1, "ms", "ma")
dem_all$l1 <- str_replace(dem_all$l1, "on", "es")
## Homogeneity of variances tests
dem_all <- dem_all %>%
filter(., l1 != "es")
dem_all %>%
filter(., participant != 'IES04' & participant != 'IES17' &
participant != 'AES32' & participant != 'IES28') %>%
group_by(., l1) %>%
summarise(
l2_use = round(mean(percent_l2_week),2),
l2_use_sd = round(sd(percent_l2_week),2),
n = length(unique(participant))
) %>% knitr::kable()
# Load models as list and store full mod to global env
load(paste0(gca_mods_path, "/gca_mon_mods.Rdata"))
params <- gca_mon_mods$gca_mod_mon_base %>%
tidy_lme4() %>%
rename(B = Estimate)
params$subscript <-
c(paste0(0:3, 0))
params <- tibble::column_to_rownames(params, 'subscript')
params$subscript <-
c(paste0(0:3, 0))
View(params)
plogis(-0.138)
plogis(0.402)
library("papaja")
library("officer")
library("flextable")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
source(here::here("scripts", "02_load_data.R"))
source(here::here("scripts", "01_helpers.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "stress", "gca")
load(paste0(gca_mods_path, "/gca_l2_mods.Rdata"))
load(paste0(gca_mods_path, "/model_preds_l2.Rdata"))
gca_l2_mods$gca_l2_mod_dele_final %>%
tidy_lme4() %>%
rename(B = Estimate)
border_1 <- fp_border(width = 1.5)
border_2 <- fp_border(width = 0.75)
model_preds$target_offset_preds_l2_dele %>%
mutate(stress = if_else(stress == 1, "Present", "Preterit"),
l1 = if_else(l1 == 'EN', "English", "Mandarin"),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
arrange(l1, stress) %>%
group_by(l1, stress) %>%
filter(., DELE == mean(DELE) + sd(DELE) | DELE == mean(DELE) - sd(DELE))
model_preds$target_offset_preds_l2_dele %>%
mutate(stress = if_else(stress == 1, "Present", "Preterit"),
l1 = if_else(l1 == 'EN', "English", "Mandarin"),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
arrange(l1, stress) %>%
group_by(l1, stress) %>%
filter(., DELE == mean(DELE) + sd(DELE) | DELE == mean(DELE) - sd(DELE)) %>%
distinct() %>%
#ungroup() %>%
mutate(l1 = blank_same_as_last(as.character(l1)),
stress = blank_same_as_last(as.character(stress))) %>%
select(L1 = l1, `Lexical stress` = stress, Proficiency = DELE, Probability = prob,
LB = prob_lb, UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds$target_offset_preds_l2_dele %>%
mutate(stress = if_else(stress == 1, "Present", "Preterit"),
l1 = if_else(l1 == 'EN', "English", "Mandarin"),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
arrange(l1, stress) %>%
group_by(l1, stress) %>%
filter(., DELE == mean(DELE) + sqrt(sum((DELE - mean(DELE))^2)/N - 1) | DELE == mean(DELE) - sqrt(sum((DELE - mean(DELE))^2)/N - 1)
) %>%
distinct() %>%
#ungroup() %>%
mutate(l1 = blank_same_as_last(as.character(l1)),
stress = blank_same_as_last(as.character(stress))) %>%
select(L1 = l1, `Lexical stress` = stress, Proficiency = DELE, Probability = prob,
LB = prob_lb, UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds$target_offset_preds_l2_dele %>%
mutate(stress = if_else(stress == 1, "Present", "Preterit"),
l1 = if_else(l1 == 'EN', "English", "Mandarin"),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
arrange(l1, stress) %>%
group_by(l1, stress) %>%
filter(., DELE == mean(DELE) + sqrt(sum((DELE - mean(DELE))^2)/length(DELE) - 1) | DELE == mean(DELE) - sqrt(sum((DELE - mean(DELE))^2)/length(DELE) - 1)
) %>%
distinct() %>%
#ungroup() %>%
mutate(l1 = blank_same_as_last(as.character(l1)),
stress = blank_same_as_last(as.character(stress))) %>%
select(L1 = l1, `Lexical stress` = stress, Proficiency = DELE, Probability = prob,
LB = prob_lb, UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
mean(DELE) + sqrt(sum((DELE - mean(DELE))^2)/length(DELE) - 1)
mean(target_offset_preds_l2_dele$DELE) + sqrt(sum((target_offset_preds_l2_dele$DELE - mean(target_offset_preds_l2_dele$DELE))^2)/length(target_offset_preds_l2_dele$DELE) - 1)
mean(model_preds$target_offset_preds_l2_dele$DELE) + sqrt(sum((model_preds$target_offset_preds_l2_dele$DELE - mean(model_preds$target_offset_preds_l2_dele$DELE))^2)/length(model_preds$target_offset_preds_l2_dele$DELE) - 1)
mean(model_preds$target_offset_preds_l2_dele$DELE) + sd(model_preds$target_offset_preds_l2_dele$DELE)
mean(model_preds$target_offset_preds_l2_dele$DELE)
sd(model_preds$target_offset_preds_l2_dele$DELE)
mean(model_preds$target_offset_preds_l2_dele$DELE) - sd(model_preds$target_offset_preds_l2_dele$DELE)
model_preds$target_offset_preds_l2_dele %>%
mutate(stress = if_else(stress == 1, "Present", "Preterit"),
l1 = if_else(l1 == 'EN', "English", "Mandarin"),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
arrange(l1, stress) %>%
group_by(l1, stress) %>%
filter(., DELE == mean(DELE) + sd(DELE) | DELE == mean(DELE) - sd(DELE)
) %>%
distinct() %>%
#ungroup() %>%
mutate(l1 = blank_same_as_last(as.character(l1)),
stress = blank_same_as_last(as.character(stress))) %>%
select(L1 = l1, `Lexical stress` = stress, Proficiency = DELE, Probability = prob,
LB = prob_lb, UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds$target_offset_preds_l2_dele %>%
mutate(stress = if_else(stress == 1, "Present", "Preterit"),
l1 = if_else(l1 == 'EN', "English", "Mandarin"),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
arrange(l1, stress) %>%
group_by(l1, stress) %>%
filter(., DELE == mean(DELE) + sd(DELE) | DELE == mean(DELE) - sd(DELE)
) %>%
distinct()
model_preds$target_offset_preds_l2_dele %>%
mutate(stress = if_else(stress == 1, "Present", "Preterit"),
l1 = if_else(l1 == 'EN', "English", "Mandarin"),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
arrange(l1, stress) %>%
group_by(l1, stress)
mean(model_preds$target_offset_preds_l2_dele$DELE) - sd(model_preds$target_offset_preds_l2_dele$DELE)
model_preds$target_offset_preds_l2_dele %>%
mutate(stress = if_else(stress == 1, "Present", "Preterit"),
l1 = if_else(l1 == 'EN', "English", "Mandarin"),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
arrange(l1, stress) %>%
group_by(l1, stress)
library("papaja")
library("flextable")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
source(here::here("scripts", "02_load_data.R"))
source(here::here("scripts", "02_load_data.R"))
source(here::here("scripts", "01_helpers.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "stress", "gca")
load(paste0(gca_mods_path, "/model_preds_l2.Rdata"))
border_1 <- fp_border(width = 1.5)
border_2 <- fp_border(width = 0.75)
library("officer")
library("flextable")
library("papaja")
border_1 <- fp_border(width = 1.5)
border_2 <- fp_border(width = 0.75)
model_preds$target_offset_preds_l2_dele %>%
mutate(stress = if_else(stress == 1, "Present", "Preterit"),
l1 = if_else(l1 == 'EN', "English", "Mandarin"),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
arrange(l1, stress) %>%
group_by(l1, stress) %>%
# filter(., DELE == mean(DELE) + sd(DELE) | DELE == mean(DELE) - sd(DELE)
#          ) %>%
distinct() %>%
#ungroup() %>%
mutate(l1 = blank_same_as_last(as.character(l1)),
stress = blank_same_as_last(as.character(stress))) %>%
select(L1 = l1, `Lexical stress` = stress, Proficiency = DELE, Probability = prob,
LB = prob_lb, UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
source(here::here("scripts", "00_load_libs.R"))
# Load data
source(here::here("scripts", "02_load_data.R"))
stress_gc_subset <- stress50 %>%
select(., -WM_set) %>%
filter(., time_zero >= -4 & time_zero <= 12) %>%
mutate(., l1 = fct_relevel(l1, "es", "en", "ma"),
condition_sum = if_else(cond == "1", 1, -1)) %>%       # 1 = present, 2 = past
poly_add_columns(., time_zero, degree = 3, prefix = "ot")
l2_data <- stress_gc_subset%>%
filter(., l1 != 'es') %>%
filter(., participant != 'ies04' & participant != 'ies17' & participant != 'ies28' & participant != 'aes32') %>%
mutate(., l1 = fct_relevel(l1, "en", "ma"))
new_dat_l2 <- l2_data %>%
dplyr::select(l1, time_zero, ot1:ot3, condition_sum) %>%
mutate(DELE_z = c(-1, 0, 1),
use_z = c(-1, 0, 1)) %>%
distinct
View(l2_data)
l2_data %>%
filter(time_zero == 0) %>%
dplyr::select(l1, time_zero, ot1:ot3, condition_sum) %>% View
unique(l2_data$l1)
tibble(
l1 = unique(l2_data$l1),
time_zero = 0,
ot1 = unique(l2_data$ot1),
ot2 = unique(l2_data$ot2),
ot3 = unique(l2_data$ot3),
condition_sum = unique(l2_data$condition_sum),
DELE_z = c(-1, 0, 1),
use_z = c(-1, 0, 1))
expand.grid(
l1 = unique(l2_data$l1),
time_zero = 0,
ot1 = unique(l2_data$ot1),
ot2 = unique(l2_data$ot2),
ot3 = unique(l2_data$ot3),
condition_sum = unique(l2_data$condition_sum),
DELE_z = c(-1, 0, 1),
use_z = c(-1, 0, 1))
new_dat_l2 <- expand.grid(
l1 = unique(l2_data$l1),
time_zero = 0,
ot1 = unique(l2_data$ot1),
ot2 = unique(l2_data$ot2),
ot3 = unique(l2_data$ot3),
condition_sum = unique(l2_data$condition_sum),
DELE_z = c(-1, 0, 1),
use_z = c(-1, 0, 1))
load(paste0(gca_mods_path, "/gca_l2_mods.Rdata"))
list2env(gca_l2_mods, globalenv())
predictSE(gca_l2_mod_dele_final, new_dat_l2) %>%
as_tibble
predictSE(gca_l2_mods$gca_l2_mod_dele_final, new_dat_l2) %>%
as_tibble
gca_l2_mod_dele_final
unique(l2_data$l1)
new_dat_l2 <- expand.grid(
l1 = c('en', 'ma'),
time_zero = 0,
ot1 = unique(l2_data$ot1),
ot2 = unique(l2_data$ot2),
ot3 = unique(l2_data$ot3),
condition_sum = unique(l2_data$condition_sum),
DELE_z = c(-1, 0, 1),
use_z = c(-1, 0, 1))
predictSE(gca_l2_mod_dele_final, new_dat_l2) %>%
as_tibble
predictSE(gca_l2_mod_dele_final, new_dat_l2) %>%
as_tibble %>%
bind_cols(new_dat_l2) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se,
l1 = fct_recode(l1, EN = "en", MA = "ma"),
l1 = fct_relevel(l1, "EN", "MA"))
l2_data %>%
dplyr::select(time_zero == 0, ot1:ot3, condition_sum) %>%
mutate(DELE = c(-1, 0, 1)) %>%
distinct
l2_data %>%
fiter( time_zero == 4 ) %>%
dplyr::select(ot1:ot3, condition_sum) %>%
mutate(DELE = c(-1, 0, 1)) %>%
distinct
l2_data %>%
filter( time_zero == 4 )
l2_data %>%
filter( time_zero == 4 ) %>%
dplyr::select(ot1:ot3, condition_sum) %>%
mutate(DELE = c(-1, 0, 1)) %>%
distinct
l2_data %>%
filter( time_zero == 4 ) %>%
dplyr::select(ot1:ot3, condition_sum, DELE_z) %>%
mutate(DELE = c(-1, 0, 1)) %>%
distinct
time_zero4 <- l2_data[ which(l2_data$time_zero == 4), ]
View(time_zero4)
dele_dat_l2 <- expand.grid(
l1 = c('en', 'ma'),
ot1 = unique(time_zero4$ot1),
ot2 = unique(time_zero4$ot2),
ot3 = unique(time_zero4$ot3),
condition_sum = unique(time_zero4$condition_sum),
DELE_z = c(-1, 0, 1),
use_z = c(-1, 0, 1))
View(dele_dat_l2)
use_dat_l2 <- expand.grid(
l1 = c('en', 'ma'),
ot1 = unique(time_zero4$ot1),
ot2 = unique(time_zero4$ot2),
ot3 = unique(time_zero4$ot3),
condition_sum = unique(time_zero4$condition_sum),
use_z = c(-1, 0, 1))
predictSE(gca_l2_mod_dele_final, dele_dat_l2) %>%
as_tibble %>%
bind_cols(dele_dat_l2) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se,
l1 = fct_recode(l1, EN = "en", MA = "ma"),
l1 = fct_relevel(l1, "EN", "MA"))
fits_all_l2_dele <- predictSE(gca_l2_mod_dele_final, dele_dat_l2) %>%
as_tibble %>%
bind_cols(dele_dat_l2) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se,
l1 = fct_recode(l1, EN = "en", MA = "ma"),
l1 = fct_relevel(l1, "EN", "MA"))
fits_all_l2_dele %>% #model_preds$
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition))
dele_dat_l2 <- expand.grid(
l1 = c('en', 'ma'),
ot1 = unique(l2_data$ot1),
ot2 = unique(l2_data$ot2),
ot3 = unique(l2_data$ot3),
condition_sum = unique(l2_data$condition_sum),
DELE_z = c(-1, 0, 1))
fits_all_l2_dele <- predictSE(gca_l2_mod_dele_final, dele_dat_l2) %>%
as_tibble %>%
bind_cols(dele_dat_l2) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se,
l1 = fct_recode(l1, EN = "en", MA = "ma"),
l1 = fct_relevel(l1, "EN", "MA"))
fits_all_l2_dele %>% #model_preds$
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition))
dele_dat_l2 <- expand.grid(
l1 = c('en', 'ma'),
time_zero = l2_data$time_zero,
ot1 = unique(l2_data$ot1),
ot2 = unique(l2_data$ot2),
ot3 = unique(l2_data$ot3),
condition_sum = unique(l2_data$condition_sum),
DELE_z = c(-1, 0, 1))
fits_all_l2_dele <- predictSE(gca_l2_mod_dele_final, dele_dat_l2) %>%
as_tibble %>%
bind_cols(dele_dat_l2) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se,
l1 = fct_recode(l1, EN = "en", MA = "ma"),
l1 = fct_relevel(l1, "EN", "MA"))
fits_all_l2_dele <- predictSE(gca_l2_mod_dele_final, dele_dat_l2) %>%
as_tibble %>%
bind_cols(dele_dat_l2) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se,
l1 = fct_recode(l1, EN = "en", MA = "ma"),
l1 = fct_relevel(l1, "EN", "MA"))
fits_all_l2_dele %>% #model_preds$
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition))
