gca_mods_path  <- here("mods", "music", "gca")
# Load models as lists
load(paste0(gca_mods_path, "/ind_mods.Rdata"))
load(paste0(gca_mods_path, "/pitch_mods.Rdata"))
auditory <- read_csv("./data/clean/auditory_scores.csv")
music50 <- merge(x = stress50, y = auditory, by = "participant", all.x=TRUE)
music50 <- na.omit(music50)
stress_gc_subset <- music50 %>%
filter(., time_zero >= -4 & time_zero <= 12) %>%
mutate(., group = fct_relevel(group, "mon", "aes", "ams", "ies", "ims"),
stress_sum = if_else(cond == "1", 1, -1)) %>%           # 1 = present, 2 = preterit
poly_add_columns(., time_zero, degree = 3, prefix = "ot")
class(stress_gc_subset$pitch_dev)
type(stress_gc_subset$pitch_dev)
?class
list2env(pitch_mods, globalenv())
gca_full_mod_pitch_int_1
summary(gca_full_mod_pitch_int_1)
coef(gca_full_mod_pitch_int_1)
mod_ot1 <-
lmer(eLog ~ 1 + ot1 +
(1 + stress_sum + ot1 | participant),
control = lmerControl(optimizer = 'bobyqa'),
data = stress_gc_subset, weights = 1/wts, REML = F)
mod_ot2 <-
update(mod_ot1, . ~ . -(1 + stress_sum + ot1 | participant) +
ot2 + (1 + stress_sum + ot1 + ot2 | participant))
mod_ot3 <-
update(mod_ot2, . ~ . -(1 + stress_sum + ot1 + ot2 | participant) +
ot3 + (1 + stress_sum + ot1 + ot2 + ot3 | participant))
anova(mod_ot1, mod_ot2, mod_ot3)
mod_ot0 <- update(mod_ot3, . ~ . + (1 | target))
mod_ot1a <- update(mod_ot0, . ~ . -(1 | target) + (1 + ot1 | target))
mod_ot2a <- update(mod_ot1a, . ~ . -(1 + ot1 | target) +
+ (1 + ot1 + ot2 | target))
mod_ot3a <- update(mod_ot2a, . ~ . -(1 + ot1 + ot2 | target) +
+ (1 + ot1 + ot2 + ot3 | target))
anova(mod_ot3, mod_ot0, mod_ot1a, mod_ot2a, mod_ot3a)
gca_full_mod_pitch_int_1
View(target_offset_preds_pitch)
# Base model pitch
gca_full_mod_pitch_base <-
lmer(eLog ~ 1 + stress_sum * pitch_dev * (ot1 + ot2 + ot3) +
(1 + stress_sum + (ot1 + ot2 + ot3) | participant) +
(1 + ot1 + ot2 + ot3 | target),
control = lmerControl(optimizer = 'bobyqa',
optCtrl = list(maxfun = 3e5)),
data = stress_gc_subset, REML = F) # , na.action = na.exclude
class(target_offset_preds_pitch$pitch_dev)
# add group effect to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_pitch_group_0 <- update(gca_full_mod_pitch_base,    . ~ . + group)
gca_full_mod_pitch_group_1 <- update(gca_full_mod_pitch_group_0, . ~ . + ot1:group)
gca_full_mod_pitch_group_2 <- update(gca_full_mod_pitch_group_1, . ~ . + ot2:group)
# add 3-way int to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_pitch_int_0 <- update(gca_full_mod_pitch_group_2, . ~ . + stress_sum:pitch_dev:group)
gca_full_mod_pitch_int_1 <- update(gca_full_mod_pitch_int_0,   . ~ . + ot1:stress_sum:pitch_dev:group)
gca_full_mod_pitch_int_2 <- update(gca_full_mod_pitch_int_1,   . ~ . + ot2:stress_sum:pitch_dev:group)
# Create design dataframe for predictions
new_dat_all <- stress_gc_subset %>%
dplyr::select(group, time_zero, ot1:ot3, stress_sum, pitch_dev,
rhythm_dev) %>%
distinct
class(new_dat_all$pitch_dev)
fits_all_pitch <- predictSE(gca_full_mod_pitch_int_2, new_dat_all) %>%
as_tibble %>%
bind_cols(new_dat_all) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se,
group = fct_recode(group, SS = "mon", AE = "aes", IE = "ies", AM = "ams", IM = "ims"))
target_offset_preds_pitch <- filter(fits_all_pitch, time_zero == 4) %>%
select(group, stress = stress_sum, pitch_dev,
elog = fit, elog_lb = ymin, elog_ub = ymax) %>%
mutate(prob = plogis(elog),
prob_lb = plogis(elog_lb),
prob_ub = plogis(elog_ub)) %>%
arrange(group)
target_offset_preds_pitch %>%
mutate(stress = if_else(stress == 1, "paroxytone", "oxytone")) %>%
arrange(group, desc(stress)) %>%
mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = stress, Pitch = pitch_dev,
Probability = prob, LB = prob_lb, UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
library(flextable)
target_offset_preds_pitch %>%
mutate(stress = if_else(stress == 1, "paroxytone", "oxytone")) %>%
arrange(group, desc(stress)) %>%
mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = stress, Pitch = pitch_dev,
Probability = prob, LB = prob_lb, UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
border_1 <- fp_border(width = 1.5)
border_2 <- fp_border(width = 0.75)
model_preds$target_offset_preds_pitch %>%
mutate(stress = if_else(stress == 1, "paroxytone", "oxytone")) %>%
arrange(group, desc(stress)) %>%
mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = stress, Pitch = pitch_dev,
Probability = prob, LB = prob_lb, UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
library(officer)
library(papaja)
border_1 <- fp_border(width = 1.5)
border_2 <- fp_border(width = 0.75)
model_preds$target_offset_preds_pitch %>%
mutate(stress = if_else(stress == 1, "paroxytone", "oxytone")) %>%
arrange(group, desc(stress)) %>%
mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = stress, Pitch = pitch_dev,
Probability = prob, LB = prob_lb, UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
class(target_offset_preds_pitch$pitch_dev)
# Base model
gca_full_mod_base <-
lmer(eLog ~ 1 + (ot1 + ot2 + ot3) +
(1 + condition_sum + (ot1 + ot2 + ot3) | participant) +
(1 + ot1 + ot2 + ot3 | target),
control = lmerControl(optimizer = 'bobyqa',
optCtrl = list(maxfun = 2e4)),
data = stress_gc_subset, REML = F)
# Load data
source(here::here("scripts", "02_load_data.R"))
stress_gc_subset <- stress50 %>%
filter(., time_zero >= -4 & time_zero <= 12) %>%
mutate(., group = fct_relevel(group, "mon", "aes", "ams", "ies", "ims"),
condition_sum = if_else(cond == "1", 1, -1)) %>%       # 1 = present, 2 = past
poly_add_columns(., time_zero, degree = 3, prefix = "ot")
mod_ot1 <-
lmer(eLog ~ 1 + ot1 +
(1 + condition_sum + ot1 | participant),
control = lmerControl(optimizer = 'bobyqa'),   # , optCtrl=list(maxfun=2e5)
data = stress_gc_subset, weights = 1/wts, REML = F)
mod_ot2 <-
update(mod_ot1, . ~ . -(1 + condition_sum + ot1 | participant) +
ot2 + (1 + condition_sum + ot1 + ot2 | participant))
mod_ot3 <-
update(mod_ot2, . ~ . -(1 + condition_sum + ot1 + ot2 | participant) +
ot3 + (1 + condition_sum + ot1 + ot2 + ot3 | participant))
anova(mod_ot1, mod_ot2, mod_ot3)
mod_ot0 <- update(mod_ot3, . ~ . + (1 | target))
mod_ot1a <- update(mod_ot0, . ~ . -(1 | target) + (1 + ot1 | target))
mod_ot2a <- update(mod_ot1a, . ~ . -(1 + ot1 | target) +
+ (1 + ot1 + ot2 | target))
mod_ot3a <- update(mod_ot2a, . ~ . -(1 + ot1 + ot2 | target) +
+ (1 + ot1 + ot2 + ot3 | target))
anova(mod_ot3, mod_ot0, mod_ot1a, mod_ot2a, mod_ot3a)
anova(mod_ot3, mod_ot0, mod_ot1a, mod_ot2a, mod_ot3a)
# Base model
gca_full_mod_base <-
lmer(eLog ~ 1 + (ot1 + ot2 + ot3) +
(1 + condition_sum + (ot1 + ot2 + ot3) | participant) +
(1 + ot1 + ot2 + ot3 | target),
control = lmerControl(optimizer = 'bobyqa',
optCtrl = list(maxfun = 2e4)),
data = stress_gc_subset, REML = F)
# add group effect to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_group_0 <- update(gca_full_mod_base,   . ~ . + group)
gca_full_mod_group_1 <- update(gca_full_mod_group_0, . ~ . + ot1:group)
gca_full_mod_group_2 <- update(gca_full_mod_group_1, . ~ . + ot2:group)
gca_full_mod_group_3 <- update(gca_full_mod_group_2, . ~ . + ot3:group)
full_group_anova <-
anova(gca_full_mod_base, gca_full_mod_group_0, gca_full_mod_group_1,
gca_full_mod_group_2, gca_full_mod_group_3)
full_group_anova
full_group_anova
# add stress effect to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_stress_0 <- update(gca_full_mod_group_2,   . ~ . + condition_sum)
gca_full_mod_stress_1 <- update(gca_full_mod_stress_0, . ~ . + ot1:condition_sum)
gca_full_mod_stress_2 <- update(gca_full_mod_stress_1, . ~ . + ot2:condition_sum)
gca_full_mod_stress_3 <- update(gca_full_mod_stress_2, . ~ . + ot3:condition_sum) # singular
full_stress_anova <-
anova(gca_full_mod_group_2, gca_full_mod_stress_0, gca_full_mod_stress_1,
gca_full_mod_stress_2, gca_full_mod_stress_3)
full_stress_anova
# add 2-way int to intercept, linear slope, quadratic, and cubic time terms
gca_full_mod_int_0 <- update(gca_full_mod_stress_2, . ~ . + group:condition_sum) # singular
gca_full_mod_int_1 <- update(gca_full_mod_int_0, . ~ . + ot1:group:condition_sum) # singular
gca_full_mod_int_2 <- update(gca_full_mod_int_1, . ~ . + ot2:group:condition_sum) # singular
gca_full_mod_int_3 <- update(gca_full_mod_int_2, . ~ . + ot3:group:condition_sum) #singular
full_int_anova <- anova(gca_full_mod_stress_2, gca_full_mod_int_0, gca_full_mod_int_1,
gca_full_mod_int_2, gca_full_mod_int_3)
full_int_anova
summary(gca_full_mod_int_2) # mon reference
# Relevel for pairwise comparisons
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ams"))
gca_full_mod_int_2_ams <- update(gca_full_mod_int_2)
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "mon"))
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ims"))
gca_full_mod_int_2_ims <- update(gca_full_mod_int_2)
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "mon"))
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "aes"))
gca_full_mod_int_2_aes <- update(gca_full_mod_int_2)
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "mon"))
stress_gc_subset %<>% mutate(., group = fct_relevel(group, "ies"))
gca_full_mod_int_2_ies <- update(gca_full_mod_int_2)
# Create design dataframe for predictions
new_dat_all <- stress_gc_subset %>%
dplyr::select(group, time_zero, ot1:ot3, condition_sum) %>%
distinct
# Get model predictions and SE
fits_all <- predictSE(gca_full_mod_int_2, new_dat_all) %>%
as_tibble %>%
bind_cols(new_dat_all) %>%
rename(se = se.fit) %>%
mutate(ymin = fit - se, ymax = fit + se,
group = fct_recode(group, SS = "mon", AE = "aes", IE = "ies", AM = "ams", IM = "ims"),
group = fct_relevel(group, "SS", "AE", "AM", "IE", "IM"))
# Filter preds at target offset
target_offset_preds <- filter(fits_all, time_zero == 4) %>%
select(group, stress = condition_sum,
elog = fit, elog_lb = ymin, elog_ub = ymax) %>%
mutate(prob = plogis(elog),
prob_lb = plogis(elog_lb),
prob_ub = plogis(elog_ub)) %>%
arrange(group)
# Build model names programatically
mod_type <- "gca_full_mod"
mod_spec <- c("_base", "_group_0", "_group_1", "_group_2", "_group_3",
"_stress_0", "_stress_1", "_stress_2", "_stress_3",
"_int_0", "_int_1", "_int_2", "_int_3",
"_int_2_ams", "_int_2_ims", "_int_2_aes", "_int_2_ies")
# Store ind models in list
gca_full_mods <- mget(c(paste0(mod_type, mod_spec)))    # int_2 final model
save(gca_full_mods,
file = here("mods", "stress", "gca",
"gca_full_mods.Rdata"))
# Save anova model comparisons
nested_model_comparisons <-
mget(c(#"mon_cond_anova", "mon_wm_anova", "mon_int_anova",
#        "aes_cond_anova", "aes_wm_anova", "aes_int_anova",
#        "ies_cond_anova", "ies_wm_anova", "ies_int_anova",
#        "ams_cond_anova", "ams_wm_anova", "ams_int_anova",
#        "ims_cond_anova", "ims_wm_anova", "ims_int_anova",
"full_group_anova", "full_stress_anova", "full_int_anova"
))
save(nested_model_comparisons,
file = here("mods", "stress", "gca",
"nested_model_comparisons.Rdata"))
# Save models predictions
model_preds <- mget(c("fits_all", "target_offset_preds"))
save(model_preds,
file = here("mods", "stress", "gca",
"model_preds.Rdata"))
names(stress_gc_subset)
wm <- read_csv("./data/clean/ospan_set_z_scores.csv")
stress_50 <- merge(x = stress50, y = wm, by = "participant", all.x=TRUE)
stress_50 <- na.omit(stress_50)
stress_gc_subset <- stress_50 %>%
select(., -WM_set) %>%
filter(., time_zero >= -4 & time_zero <= 12) %>%
mutate(., group = fct_relevel(group, "mon", "aes", "ams", "ies", "ims"),
condition_sum = if_else(cond == "1", 1, -1)) %>%       # 1 = present, 2 = past
poly_add_columns(., time_zero, degree = 3, prefix = "ot")
View(stress_gc_subset)
gca_full_mod_wm_0 <- update(gca_full_mod_stress_2,   . ~ . + ospan)
gca_full_mod_wm_1 <- update(gca_full_mod_wm_0, . ~ . + ot1:ospan)
View(music50)
pitch <- read_csv(here("data", 'clean', "pitch_long.csv"))
pitch <- pitch %>%
select(., -X1) %>%
rename(., pitch_rt = rt)
pitch_glm <- lmer(pitch_rt ~ base_note + direction + (1 | participant),
data = pitch)
pitch_ranef <- ranef(pitch_glm) %>% as_tibble()
View(pitch_ranef)
View(music50)
View(auditory)
gca_full_mod_wm_2 <- update(gca_full_mod_wm_1, . ~ . + ot2:ospan)
gca_full_mod_wm_3 <- update(gca_full_mod_wm_2, . ~ . + ot3:ospan)
full_wm_anova <-
anova(gca_full_mod_stress_2, gca_full_mod_wm_0, gca_full_mod_wm_1,
gca_full_mod_wm_2, gca_full_mod_wm_3)
full_wm_anova
gca_full_mod_int_a <- update(gca_full_mod_stress_2, . ~ . + group:condition_sum:ospan)
gca_full_mod_int_b <- update(gca_full_mod_int_a, . ~ . + ot1:group:condition_sum) # singular
gca_full_mod_int_c <- update(gca_full_mod_int_b, . ~ . + ot2:group:condition_sum)
gca_full_mod_int_c <- update(gca_full_mod_int_b, . ~ . + ot2:group:condition_sum,
control = lmerControl(optimizer = 'bobyqa', optCtrl = list(maxfun = 3e5)))
gca_full_mod_int_c <- update(gca_full_mod_int_b, . ~ . + ot2:group:condition_sum,
control = lmerControl(optimizer = 'bobyqa', optCtrl = list(maxfun = 4e5)))
gca_full_mod_int_b <- update(gca_full_mod_int_a, . ~ . + ot1:group:condition_sum:ospan) # singular
library("papaja")
library("officer")
library("flextable")
source(here::here("scripts", "01_helpers.R"))
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
source(here::here("scripts", "01_helpers.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "stress", "gca")
# Load models as list and store full mod to global env
load(paste0(gca_mods_path, "/model_preds.Rdata"))
load(paste0(gca_mods_path, "/gca_full_mods.Rdata"))
border_1 <- fp_border(width = 1.5)
border_2 <- fp_border(width = 0.75)
model_preds$target_offset_preds %>%
mutate(cond = if_else(stress == 1, "present", "preterit"),
group = fct_relevel(group, "SS", "AE", "AM", "IE", "IM")) %>%
arrange(group, desc(stress)) %>%
mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = cond, Probability = prob, LB = prob_lb,
UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
# Get full mod and make it pretty for the table
pretty_fixed_effects <- gca_full_mods$gca_full_mod_int_2 %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:3, 0), paste0(0:3, 1),
paste0(0:3, 2), paste0(0:3, 3),
paste0(0:3, 4), paste0(0:3, 5),
paste0(0:3, 6))
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects$Parameter %<>% paste(., var_labels)
pretty_fixed_effects %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
library("papaja")
library("officer")
library("flextable")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
source(here::here("scripts", "01_helpers.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "music", "gca")
# Load models as list and store full mod to global env
load(paste0(gca_mods_path, "/pitch_mods.Rdata"))
library("papaja")
library("officer")
library("flextable")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
#source(here::here("scripts", "02_load_data.R"))
source(here::here("scripts", "01_helpers.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "vision", "gca")
# Load models as list and store full mod to global env
load(paste0(gca_mods_path, "/full_mods.Rdata"))
border_1 <- fp_border(width = 1.5)
border_2 <- fp_border(width = 0.75)
model_preds$target_offset_preds %>%
mutate(stress = if_else(stress == 1, "paroxytone", "oxytone")) %>%
arrange(group, desc(stress), corsi, motion) %>%
mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = stress, `Visual pred.` = motion,
`Visuospatial WM` = corsi, Probability = prob, LB = prob_lb,
UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds$target_offset_preds %>%
mutate(stress = if_else(stress == 1, "paroxytone", "oxytone")) %>%
arrange(group, desc(stress), corsi) %>%
mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = stress, `Visual pred.` = motion,
`Visuospatial WM` = corsi, Probability = prob, LB = prob_lb,
UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds$target_offset_preds %>%
#mutate(stress = if_else(stress == 1, "paroxytone", "oxytone")) %>%
arrange(group, desc(stress), corsi) %>%
mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = stress, `Visual pred.` = motion,
`Visuospatial WM` = corsi, Probability = prob, LB = prob_lb,
UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds$target_offset_preds %>%
mutate(stress = if_else(stress == 1, "paroxytone", "oxytone")) %>%
arrange(group, desc(stress), corsi) %>%
#mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = stress, `Visual pred.` = motion,
`Visuospatial WM` = corsi, Probability = prob, LB = prob_lb,
UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
load(paste0(gca_mods_path, "/model_preds.Rdata"))
model_preds$target_offset_preds %>%
mutate(stress = if_else(stress == 1, "paroxytone", "oxytone")) %>%
arrange(group, desc(stress), corsi) %>%
mutate(group = blank_same_as_last(as.character(group))) %>%
select(Group = group, `Lexical stress` = stress, `Visual pred.` = motion,
`Visuospatial WM` = corsi, Probability = prob, LB = prob_lb,
UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
pretty_fixed_effects[1,3]
# Get full mod and make it pretty for the table
pretty_fixed_effects <- full_mods$gca_full_mod_int_1 %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:3, 0), paste0(0:3, 1),
paste0(0:3, 2), paste0(0:3, 3),
paste0(0:3, 4), paste0(0:3, 5),
paste0(0:3, 6))
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects$Parameter %<>% paste(., var_labels)
pretty_fixed_effects %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
pretty_fixed_effects[1,3]
(*&gamma;*~00~&nbsp;=&nbsp;`r pretty_fixed_effects[1,3]`, SE =&nbsp;`r pretty_fixed_effects[1,4]`, *t* = `r pretty_fixed_effects[1,5]`, *p* = `r pretty_fixed_effects[11,6]`)
pretty_fixed_effects[11,6]
pretty_fixed_effects[23,6]
pretty_fixed_effects[37,3]
source(here::here("scripts", "00_load_libs.R"))
dem_all <- read_csv("./data/pupurri_analysis.csv")
dem_all$DELE <- as.numeric(dem_all$DELE)
dem_all %>%
filter(., group %in% c("ies", "aes", "ims", "ams")) %>%
group_by(., group) %>%
summarize(., DELE_mean = mean(DELE),
DELE_sd = sd(DELE),
n = n())
bartlett.test(DELE ~ group, data = dem_all) # all good
# DELE tost aes vs ams (OK, not significant and between dotted lines so they are not different)
TOSTER::TOSTtwo(m1 = 45.4, sd1 = 4.26, n1 = 32, # aes
m2 = 45.5, sd2 = 3.97, n2 = 32, # ams
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
# DELE tost ies vs ims (idem)
TOSTER::TOSTtwo(m1 = 31.7, sd1 = 4.58, n1 = 33, # ies
m2 = 32.8, sd2 = 4.23, n2 = 32, # ims
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
View(aes_pret_c3)
