pretty_fixed_effects %>%
select(-effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
# Get full mod and make it pretty for the table
pretty_fixed_effects <- l2_onset_c3_dele %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:2, 0))
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects$Parameter %<>% paste(., var_labels)
pretty_fixed_effects %>%
select(-effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
l2_onset_c3_dele
summary(l2_onset_c3_dele)
# Get full mod and make it pretty for the table
pretty_fixed_effects <- l2_onset_c3_dele %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
# Get full mod and make it pretty for the table
pretty_fixed_effects <- l2_onset_c3_dele %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
# Get full mod and make it pretty for the table
l2_onset_c3_dele %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
# Get full mod and make it pretty for the table
l2_onset_c3_use %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
# Get full mod and make it pretty for the table
mon_onset_v1_final %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
summary(mon_onset_v1_final)
mon_onset_v1_final %>% # Ranef same for DELE and USE
tidy_ranef_summary %>%
# Format the numbers
mutate_each(funs(format_fixef_num), vcov, sdcor) %>%
mutate_each(funs(format_cor), -var1, -grp, -vcov, -sdcor) %>%
sort_ranef_grps %>%
# Format variable names and group names
mutate(var1 = fix_param_names(var1) %>% blank_nas,
grp =  blank_same_as_last(grp) %>% fix_param_names) %>%
rename(Group = grp, Parameter = var1, Variance = vcov, SD = sdcor)
# Correlation columns need names with characters so that pandoc can align them
names(ranef_table)[5:9] <-
c("Correlations", "&nbsp;", " &nbsp;", "  &nbsp;", "  &nbsp;")
ranef_table <- gca_l2_mods$gca_l2_mod_use_final %>% # Ranef same for DELE and USE
tidy_ranef_summary %>%
# Format the numbers
mutate_each(funs(format_fixef_num), vcov, sdcor) %>%
mutate_each(funs(format_cor), -var1, -grp, -vcov, -sdcor) %>%
sort_ranef_grps %>%
# Format variable names and group names
mutate(var1 = fix_param_names(var1) %>% blank_nas,
grp =  blank_same_as_last(grp) %>% fix_param_names) %>%
rename(Group = grp, Parameter = var1, Variance = vcov, SD = sdcor)
ranef_table <- mon_onset_v1_final %>% # Ranef same for DELE and USE
tidy_ranef_summary %>%
# Format the numbers
mutate_each(funs(format_fixef_num), vcov, sdcor) %>%
mutate_each(funs(format_cor), -var1, -grp, -vcov, -sdcor) %>%
sort_ranef_grps %>%
# Format variable names and group names
mutate(var1 = fix_param_names(var1) %>% blank_nas,
grp =  blank_same_as_last(grp) %>% fix_param_names) %>%
rename(Group = grp, Parameter = var1, Variance = vcov, SD = sdcor)
# Correlation columns need names with characters so that pandoc can align them
names(ranef_table)[5:9] <-
c("Correlations", "&nbsp;", " &nbsp;", "  &nbsp;", "  &nbsp;")
ranef_table
ranef_table <- gca_l2_mods$gca_l2_mod_use_final %>% # Ranef same for DELE and USE
tidy_ranef_summary %>%
# Format the numbers
mutate_each(funs(format_fixef_num), vcov, sdcor) %>%
mutate_each(funs(format_cor), -var1, -grp, -vcov, -sdcor) %>%
sort_ranef_grps %>%
# Format variable names and group names
mutate(var1 = fix_param_names(var1) %>% blank_nas,
grp =  blank_same_as_last(grp) %>% fix_param_names) %>%
rename(Group = grp, Parameter = var1, Variance = vcov, SD = sdcor)
ranef_table <- mon_onset_v1_final %>% # Ranef same for DELE and USE
tidy_ranef_summary %>%
# Format the numbers
mutate_each(funs(format_fixef_num), vcov, sdcor) %>%
mutate_each(funs(format_cor), -var1, -grp, -vcov, -sdcor) %>%
sort_ranef_grps %>%
# Format variable names and group names
mutate(var1 = fix_param_names(var1) %>% blank_nas,
grp =  blank_same_as_last(grp) %>% fix_param_names) %>%
rename(Group = grp, Parameter = var1, Variance = vcov, SD = sdcor)
ranef_table
# Correlation columns need names with characters so that pandoc can align them
names(ranef_table)[2:6] <-
c("Correlations", "&nbsp;", " &nbsp;", "  &nbsp;", "  &nbsp;")
ranef_table %>%
knitr::kable(format = "pandoc", align = str_tokenize("llrrrrrr"))
# Get full mod and make it pretty for the table
mon_onset_v1_final %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
ranef_table <- mon_onset_v1_final %>% # Ranef same for DELE and USE
tidy_ranef_summary %>%
# Format the numbers
mutate_each(funs(format_fixef_num), vcov, sdcor) %>%
mutate_each(funs(format_cor), -var1, -grp, -vcov, -sdcor) %>%
sort_ranef_grps %>%
# Format variable names and group names
mutate(var1 = fix_param_names(var1) %>% blank_nas,
grp =  blank_same_as_last(grp) %>% fix_param_names) %>%
rename(Group = grp, Parameter = var1, Variance = vcov, SD = sdcor)
# Correlation columns need names with characters so that pandoc can align them
names(ranef_table)[2:6] <-
c("Correlations", "&nbsp;", " &nbsp;", "  &nbsp;", "  &nbsp;")
ranef_table %>%
knitr::kable(format = "pandoc", align = str_tokenize("llrrrrrr"))
source(here::here("scripts", "00_load_libs.R"))
# source(here::here("scripts", "02_load_data.R"))
stress10 <- read_csv(here::here("data", 'clean', 'stress_10ms_final_onset_c3.csv'))
df_stress <- stress10 %>%
filter(., time_zero == 20) %>%
mutate(., condition_sum = if_else(cond == "1", 1, -1)) #   1 = present
stress_l2 <- df_stress %>%
filter(., l1 != 'es') %>%
mutate(., l1 = fct_relevel(l1, "en", "ma"))
prop_0_l2_mod_0 <- glmer(cbind(target_count, 10 - target_count) ~ 1 +
(1 + condition_sum | participant) +
(1 | target),
data = stress_l2, family = 'binomial',
control = glmerControl(optimizer = 'bobyqa'))
prop_0_l2_mod_l1    <- update(prop_0_l2_mod_0,     . ~ . + l1)
prop_0_l2_mod_cond  <- update(prop_0_l2_mod_l1,    . ~ . + condition_sum)
prop_0_l2_mod_int   <- update(prop_0_l2_mod_cond,  . ~ . + l1:condition_sum)
anova(prop_0_l2_mod_0, prop_0_l2_mod_l1, test = "Chisq")
anova(prop_0_l2_mod_l1, prop_0_l2_mod_cond, test = "Chisq")
anova(prop_0_l2_mod_l1, prop_0_l2_mod_int, test = "Chisq")
prop_0_l2_mod_wm       <- update(prop_0_l2_mod_l1,  . ~ . + ospan)
prop_0_l2_mod_int_wm   <- update(prop_0_l2_mod_wm,    . ~ . + l1:condition_sum:ospan)
anova(prop_0_l2_mod_l1, prop_0_l2_mod_wm, test = "Chisq")
anova(prop_0_l2_mod_l1, prop_0_l2_mod_int_wm, test = "Chisq") # no interaction wm x condition
l2_onset_c3_wm_final <- prop_0_l2_mod_l1
summary(l2_onset_c3_wm_final)
prop_0_l2_mod_dele       <- update(prop_0_l2_mod_l1,  . ~ . + DELE_z)
prop_0_l2_mod_int_dele   <- update(prop_0_l2_mod_dele,  . ~ . + l1:condition_sum:DELE_z)
anova(prop_0_l2_mod_l1, prop_0_l2_mod_dele, test = "Chisq")
anova(prop_0_l2_mod_dele, prop_0_l2_mod_int_dele, test = "Chisq") # no interaction wm x condition
l2_onset_c3_dele_final <- prop_0_l2_mod_dele
summary(l2_onset_c3_dele_final)
prop_0_l2_mod_use  <- update(prop_0_l2_mod_l1,  . ~ . + use_z)
prop_0_l2_mod_int_use   <- update(prop_0_l2_mod_use,  . ~ . + l1:condition_sum:use_z)
anova(prop_0_l2_mod_l1, prop_0_l2_mod_use, test = "Chisq")
anova(prop_0_l2_mod_use, prop_0_l2_mod_int_use, test = "Chisq")
l2_onset_c3_use_final <- prop_0_l2_mod_use
summary(l2_onset_c3_use_final)
# load data
stress10 <- read.delim(here("data", "stress_10bin.txt"))
# Read data
stress10 <- stress10 %>%
# create variable group
separate(., col = RECORDING_SESSION_LABEL,
into = c("group", "group_member"),
sep = 3,
remove = FALSE) %>%
#select and rename variables of interest
select(., RECORDING_SESSION_LABEL, TRIAL_INDEX, BIN_INDEX,
AVERAGE_IA_0_SAMPLE_COUNT, AVERAGE_IA_0_SAMPLE_COUNT_.,
AVERAGE_IA_1_SAMPLE_COUNT, AVERAGE_IA_1_SAMPLE_COUNT_.,
AVERAGE_IA_2_SAMPLE_COUNT, AVERAGE_IA_2_SAMPLE_COUNT_.,
ACCURACY, RT, block, cond,
id, lex_freq, phonot_freq,
t01, t02, t03, t04, t05, t06, t07, target, version, group) %>%
dplyr::rename(., participant = RECORDING_SESSION_LABEL,
trial = TRIAL_INDEX,
bin = BIN_INDEX,
target_count = AVERAGE_IA_1_SAMPLE_COUNT,
target_prop = AVERAGE_IA_1_SAMPLE_COUNT_.,
offset_prev_word = t01,
onset_v1 = t02,
onset_c2 = t03,
onset_c3 = t04,
onset_v2 = t05,
offset_target = t06,
endSentence = t07,
sentence_id = id) %>%
# remove incorrect
filter(., ACCURACY == 1) %>%
# drop unused levels of factors
droplevels(.) %>%
# Create eLog variable and respective wts
mutate(.,eLog = log((target_count + 0.5) / (10 - target_count + 0.5)),
wts = 1 / (target_count + 0.5) + 1 / (10 - target_count + 0.5)) %>%
# CHANGE onset_c3 DEPENDING ON TRIGGER TO ANALYZE
dplyr::select(participant, group, target, cond, target, bin,
target_count, target_prop, eLog, wts, onset_c2) %>%
gather(., landmark, lm_bin, -c(participant:wts)) %>%
mutate(., lm_bin = (lm_bin / 10) %>% ceiling(.),
t_onset = if_else(bin == lm_bin, TRUE, FALSE)) %>%
group_by(., participant, target) %>%
mutate(., time_zero = onset_pupil(bin, t_onset, event = c("TRUE"))) %>%
ungroup(.)
# Load verbal WM
dem <- read_csv(here("data", "pupurri_analysis.csv"))
dem <- dem %>%
select(., participant, DELE, percent_l2_week, WM_set)
dem$participant <- tolower(dem$participant)
dem$DELE <- as.numeric(dem$DELE)
# Add verbal wm score to eyetracking data frame
stress10 <- merge(x = stress10, y = dem, by = "participant", all.x=TRUE)
# Create L1 column
stress10 <- separate(data = stress10,
col = group,
into = c("prof", "l1"),
sep = 1,
remove = FALSE)
stress10$l1 <- str_replace(stress10$l1, "es", "en")
stress10$l1 <- str_replace(stress10$l1, "ms", "ma")
stress10$l1 <- str_replace(stress10$l1, "on", "es")
# This needs to be updated for all df at triggers other than C3
stress10$DELE[is.na(stress10$DELE) & stress10$l1 == 'es'] <- 56
stress10$percent_l2_week[is.na(stress10$percent_l2_week) & stress10$l1 == 'es'] <- 0
stress10 <- stress10 %>%
# mutate(DELE = DELE + runif(n(), min = -0.15, max = 0.15) * (n() > 1)) %>%
mutate(., ospan = (WM_set - mean(WM_set))/sd(WM_set),
use_z = (percent_l2_week - mean(percent_l2_week))/sd(percent_l2_week),
DELE_z = (DELE - mean(DELE))/sd(DELE)
)
write_csv(stress10, here("data", "clean", "stress_10ms_final_onset_c2.csv"))
# source(here::here("scripts", "02_load_data.R"))
stress10 <- read_csv(here::here("data", 'clean', 'stress_10ms_final_onset_c2.csv'))
df_stress <- stress10 %>%
filter(., time_zero == 20) %>%
mutate(., condition_sum = if_else(cond == "1", 1, -1)) #   1 = present
stress_l2 <- df_stress %>%
filter(., l1 != 'es') %>%
mutate(., l1 = fct_relevel(l1, "en", "ma"))
prop_0_l2_mod_0 <- glmer(cbind(target_count, 10 - target_count) ~ 1 +
(1 + condition_sum | participant) +
(1 | target),
data = stress_l2, family = 'binomial',
control = glmerControl(optimizer = 'bobyqa'))
prop_0_l2_mod_l1    <- update(prop_0_l2_mod_0,     . ~ . + l1)
prop_0_l2_mod_cond  <- update(prop_0_l2_mod_l1,    . ~ . + condition_sum)
prop_0_l2_mod_int   <- update(prop_0_l2_mod_cond,  . ~ . + l1:condition_sum)
anova(prop_0_l2_mod_0, prop_0_l2_mod_l1, test = "Chisq")
anova(prop_0_l2_mod_0, prop_0_l2_mod_cond, test = "Chisq")
anova(prop_0_l2_mod_0, prop_0_l2_mod_int, test = "Chisq")
prop_0_l2_mod_wm       <- update(prop_0_l2_mod_0,  . ~ . + ospan)
prop_0_l2_mod_int_wm   <- update(prop_0_l2_mod_wm,    . ~ . + l1:condition_sum:ospan)
anova(prop_0_l2_mod_0, prop_0_l2_mod_wm, test = "Chisq")
anova(prop_0_l2_mod_0, prop_0_l2_mod_int_wm, test = "Chisq") # no interaction wm x condition
l2_onset_c2_all_final <- prop_0_l2_mod_0
summary(l2_onset_c2_all_final)
prop_0_l2_mod_dele       <- update(prop_0_l2_mod_0,  . ~ . + DELE)
prop_0_l2_mod_int_dele   <- update(prop_0_l2_mod_dele,  . ~ . + l1:condition_sum:DELE)
anova(prop_0_l2_mod_0, prop_0_l2_mod_dele, test = "Chisq")
prop_0_l2_mod_dele       <- update(prop_0_l2_mod_0,  . ~ . + DELE_z)
prop_0_l2_mod_int_dele   <- update(prop_0_l2_mod_dele,  . ~ . + l1:condition_sum:DELE_z)
anova(prop_0_l2_mod_0, prop_0_l2_mod_dele, test = "Chisq")
anova(prop_0_l2_mod_0, prop_0_l2_mod_int_dele, test = "Chisq") # no interaction wm x condition
prop_0_l2_mod_use  <- update(prop_0_l2_mod_0,  . ~ . + percent_l2_week)
anova(prop_0_l2_mod_0, prop_0_l2_mod_use, test = "Chisq")
prop_0_l2_mod_int_use   <- update(prop_0_l2_mod_0,  . ~ . + l1:condition_sum:percent_l2_week)
anova(prop_0_l2_mod_0, prop_0_l2_mod_int_use, test = "Chisq")
# source(here::here("scripts", "02_load_data.R"))
stress10 <- read_csv(here::here("data", 'clean', 'stress_10ms_final_onset_c3.csv'))
df_stress <- stress10 %>%
filter(., time_zero == 20) %>%
mutate(., condition_sum = if_else(cond == "1", 1, -1)) #   1 = present
stress_l2 <- df_stress %>%
filter(., l1 != 'es') %>%
mutate(., l1 = fct_relevel(l1, "en", "ma"))
prop_0_l2_mod_0 <- glmer(cbind(target_count, 10 - target_count) ~ 1 +
(1 + condition_sum | participant) +
(1 | target),
data = stress_l2, family = 'binomial',
control = glmerControl(optimizer = 'bobyqa'))
prop_0_l2_mod_l1    <- update(prop_0_l2_mod_0,     . ~ . + l1)
prop_0_l2_mod_cond  <- update(prop_0_l2_mod_l1,    . ~ . + condition_sum)
prop_0_l2_mod_int   <- update(prop_0_l2_mod_cond,  . ~ . + l1:condition_sum)
anova(prop_0_l2_mod_0, prop_0_l2_mod_l1, test = "Chisq")
anova(prop_0_l2_mod_l1, prop_0_l2_mod_cond, test = "Chisq")
anova(prop_0_l2_mod_l1, prop_0_l2_mod_int, test = "Chisq")
prop_0_l2_mod_wm       <- update(prop_0_l2_mod_l1,  . ~ . + ospan)
prop_0_l2_mod_int_wm   <- update(prop_0_l2_mod_wm,    . ~ . + l1:condition_sum:ospan)
anova(prop_0_l2_mod_l1, prop_0_l2_mod_wm, test = "Chisq")
anova(prop_0_l2_mod_l1, prop_0_l2_mod_int_wm, test = "Chisq") # no interaction wm x condition
l2_onset_c3_wm_final <- prop_0_l2_mod_l1
summary(l2_onset_c3_wm_final)
prop_0_l2_mod_dele       <- update(prop_0_l2_mod_l1,  . ~ . + DELE_z)
prop_0_l2_mod_int_dele   <- update(prop_0_l2_mod_dele,  . ~ . + l1:condition_sum:DELE_z)
anova(prop_0_l2_mod_l1, prop_0_l2_mod_dele, test = "Chisq")
anova(prop_0_l2_mod_dele, prop_0_l2_mod_int_dele, test = "Chisq") # no interaction wm x condition
l2_onset_c3_dele_final <- prop_0_l2_mod_dele
summary(l2_onset_c3_dele_final)
prop_0_l2_mod_use  <- update(prop_0_l2_mod_l1,  . ~ . + use_z)
prop_0_l2_mod_int_use   <- update(prop_0_l2_mod_use,  . ~ . + l1:condition_sum:use_z)
anova(prop_0_l2_mod_l1, prop_0_l2_mod_use, test = "Chisq")
anova(prop_0_l2_mod_use, prop_0_l2_mod_int_use, test = "Chisq")
l2_onset_c3_use_final <- prop_0_l2_mod_use
summary(l2_onset_c3_use_final)
saveRDS(l2_onset_c3_wm_final, here("mods", "stress",
"glmm", "onset_c3", "l2_onset_c3_wm_final_z.rds"))
saveRDS(l2_onset_c3_dele_final, here("mods", "stress",
"glmm", "onset_c3", "l2_onset_c3_wm_final_z.rds"))
l2_onset_c3_dele <- readRDS(here("mods", "stress", "glmm", "onset_c3", "l2_onset_c3_dele_final_z.rds"))
saveRDS(l2_onset_c3_dele_final, here("mods", "stress",
"glmm", "onset_c3", "l2_onset_c3_dele_final_z.rds"))
saveRDS(l2_onset_c3_use_final, here("mods", "stress",
"glmm", "onset_c3", "l2_onset_c3_use_final_z.rds"))
l2_onset_c3_dele <- readRDS(here("mods", "stress", "glmm", "onset_c3", "l2_onset_c3_dele_final_z.rds"))
l2_onset_c3_dele <- readRDS(here("mods", "stress", "glmm", "onset_c3", "l2_onset_c3_dele_final_z.rds"))
# Get full mod and make it pretty for the table
l2_onset_c3_dele %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
# Get full mod and make it pretty for the table
l2_onset_c3_use %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
library(tidyverse); library(TOSTER)
# Load data
#dem_all <- read_csv(here::here("data", "clean", "ospan_set_z_scores.csv"))
dem_all <- read_csv(here::here("data", "pupurri_analysis.csv"))
unique(dem_all$participant)
dem_all <- dem_all %>%
# separate(., col = participant,
#          into = c('group', 'id'),
#          sep = 3,
#          remove = FALSE) %>%
separate(., col = group,
into = c("proficiency", "l1"), # es = EN speaker, ms = MA speaker, on = ES speaker
sep = 1,
remove = FALSE)
dem_all$l1 <- str_replace(dem_all$l1, "es", "en")
dem_all$l1 <- str_replace(dem_all$l1, "ms", "ma")
dem_all$l1 <- str_replace(dem_all$l1, "on", "es")
dem_all$DELE <- as.numeric(dem_all$DELE)
dem_all %>%
group_by(., group) %>%
filter(., group != "mon") %>%
summarise(., dele = round(mean(DELE),2),
dele_sd = round(sd(DELE),2),
n = length(unique(participant))) %>%
knitr::kable()
unique(dem_all$l1)
## All seem ok
bartlett.test(DELE ~ l1, data = dem_all)
dem_all$DELE <- as.numeric(dem_all$DELE)
dem_all %>%
group_by(., L1) %>%
filter(., L1 != "ES") %>%
summarise(., dele = round(mean(DELE),2),
dele_sd = round(sd(DELE),2),
n = length(unique(participant))) %>%
knitr::kable()
dem_all %>%
group_by(., L1) %>%
filter(., l1 != "es") %>%
summarise(., dele = round(mean(DELE),2),
dele_sd = round(sd(DELE),2),
n = length(unique(participant))) %>%
knitr::kable()
# Load data
#dem_all <- read_csv(here::here("data", "clean", "ospan_set_z_scores.csv"))
dem_all <- read_csv(here::here("data", "pupurri_analysis.csv"))
dem_all <- dem_all %>%
# separate(., col = participant,
#          into = c('group', 'id'),
#          sep = 3,
#          remove = FALSE) %>%
separate(., col = group,
into = c("proficiency", "l1"), # es = EN speaker, ms = MA speaker, on = ES speaker
sep = 1,
remove = FALSE)
dem_all$l1 <- str_replace(dem_all$l1, "es", "en")
dem_all$l1 <- str_replace(dem_all$l1, "ms", "ma")
dem_all$l1 <- str_replace(dem_all$l1, "on", "es")
dem_all$DELE <- as.numeric(dem_all$DELE)
dem_all %>%
group_by(., L1) %>%
filter(., l1 != "es") %>%
summarise(., dele = round(mean(DELE),2),
dele_sd = round(sd(DELE),2),
n = length(unique(participant))) %>%
knitr::kable()
dem_all %>%
group_by(., l1) %>%
filter(., l1 != "es") %>%
summarise(., dele = round(mean(DELE),2),
dele_sd = round(sd(DELE),2),
n = length(unique(participant))) %>%
knitr::kable()
dem_all %>%
group_by(., l1) %>%
summarise(aoa_l2 = round(mean(AoA_L2),2),
aoa_l2_sd = round(sd(AoA_L2),2),
abroad = round(mean(mo_ES_country),2),
abroad_sd = round(sd(mo_ES_country),2),
l1_use = round(mean(percent_l1_week),2),
l1_use_sd = round(sd(percent_l1_week),2),
l2_use = round(mean(percent_l2_week),2),
l2_use_sd = round(sd(percent_l2_week),2),
n = length(unique(participant))
) %>% knitr::kable()
## Homogeneity of variances tests
dem_all <- dem_all %>%
filter(., l1 != "es")
## All seem ok
bartlett.test(DELE ~ l1, data = dem_all)
bartlett.test(AoA_L2 ~ l1, data = dem_all) # p-value = 0.0006495
bartlett.test(mo_ES_country ~ l1, data = dem_all) # p-value = 0.01594
bartlett.test(percent_l1_week ~ l1, data = dem_all)
bartlett.test(percent_l2_week ~ l1, data = dem_all)
# time abroad
TOSTtwo(m1 = 38.08, sd1 = 33.48, n1 = 65, # en
m2 = 40.83, sd2 = 45.46, n2 = 64, # ma
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
# dele
TOSTtwo(m1 = 38.48, sd1 = 8.19, n1 = 65, # EN
m2 = 39.17, sd2 = 7.56, n2 = 64, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
# L2 weekly use
# signicant and outside area between dotted lines
TOSTtwo(m1 = 33.31, sd1 = 17.44, n1 = 65, # EN
m2 = 41.64, sd2 = 21.66 n2 = 64, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
# L2 weekly use
# signicant and outside area between dotted lines
TOSTtwo(m1 = 33.31, sd1 = 17.44, n1 = 65, # EN
m2 = 41.64, sd2 = 21.66, n2 = 64, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
t.test(l2_use ~ l1, data = dem_all, var.equal = TRUE)
dem_all
t.test(percent_l2_week ~ l1, data = dem_all, var.equal = TRUE)
# dele
t.test(DELE ~ l1, data = dem_all, var.equal = TRUE)
TOSTtwo(m1 = 38.48, sd1 = 8.19, n1 = 65, # EN
m2 = 39.17, sd2 = 7.56, n2 = 64, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
TOSTtwo(m1 = 38.08, sd1 = 33.48, n1 = 65, # en
m2 = 40.83, sd2 = 45.46, n2 = 64, # ma
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
# time abroad
t.test(mo_ES_country ~ l1, data = dem_all, var.equal = TRUE)
TOSTtwo(m1 = 38.08, sd1 = 33.48, n1 = 65, # en
m2 = 40.83, sd2 = 45.46, n2 = 64, # ma
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
TOSTtwo(m1 = 38.48, sd1 = 8.19, n1 = 65, # EN
m2 = 39.17, sd2 = 7.56, n2 = 64, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
# L2 weekly use
# signicant and outside area between dotted lines
TOSTtwo(m1 = 33.31, sd1 = 17.44, n1 = 65, # EN
m2 = 41.64, sd2 = 21.66, n2 = 64, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
t.test(percent_l2_week ~ l1, data = dem_all, var.equal = TRUE)
