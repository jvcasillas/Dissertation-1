fits_all_pitch %>%
na.omit(.) %>%
filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = pitch_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
#geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
geom_line(size = 0.75) +
geom_point(aes(color = pitch_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = pitch_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
# scale_color_brewer(palette = "Set1", name = "Syllable structure") +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Pitch RT")#+ l
fits_all_pitch %>%
na.omit(.) %>%
filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = pitch_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
#geom_line(size = 0.75) +
geom_point(aes(color = pitch_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = pitch_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
# scale_color_brewer(palette = "Set1", name = "Syllable structure") +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Pitch RT")#+
# Load models as list and store full mod to global env
load(paste0(gca_mods_path, "/pitch_mods.Rdata"))
load(paste0(gca_mods_path, "/model_preds.Rdata"))
model_preds$fits_all_pitch %>%
na.omit(.) %>%
#filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = pitch_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F)
model_preds$fits_all_pitch %>%
na.omit(.) %>%
#filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = pitch_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21)
fits_all_pitch %>%
na.omit(.) %>%
#filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = pitch_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
#geom_line(size = 0.75) +
geom_point(aes(color = pitch_dev), color = "blue", size = 1.3, show.legend = F) +
geom_point(aes(color = pitch_dev), size = 0.85, show.legend = F)
model_preds$fits_all_pitch %>%
na.omit(.) %>%
#filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = pitch_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
#geom_line(size = 0.75) +
geom_point(aes(color = pitch_dev), color = "light blue", size = 1.3, show.legend = F) +
geom_point(aes(color = pitch_dev), size = 0.85, show.legend = F)
model_preds$fits_all_pitch %>%
na.omit(.) %>%
#filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = pitch_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', color = 'blue', size = 0.5,
stroke = 0.5, pch = 21)
model_preds$fits_all_pitch %>%
na.omit(.) %>%
#filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = pitch_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", color = 'light blue', size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
#geom_line(size = 0.75) +
geom_point(aes(color = pitch_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = pitch_dev), size = 0.85, show.legend = F)
model_preds$fits_all_pitch %>%
na.omit(.) %>%
#filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = pitch_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", color = 'turquoise', size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21)
model_preds$fits_all_pitch %>%
na.omit(.) %>%
#filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = pitch_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21)
model_preds$fits_all_pitch %>%
na.omit(.) %>%
#filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = pitch_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
#geom_line(size = 0.75) +
geom_point(aes(color = pitch_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = pitch_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
# scale_color_brewer(palette = "Set1", name = "Syllable structure") +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Pitch RT")
# Pitch
gca_pitch_plot <- model_preds$fits_all_pitch %>%
na.omit(.) %>%
#filter(., time_zero >= -10, time_zero <= 20) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = pitch_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
#geom_line(size = 0.75) +
geom_point(aes(color = pitch_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = pitch_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
# scale_color_brewer(palette = "Set1", name = "Syllable structure") +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Pitch RT")#+ legend_adj
model_preds$fits_all_rhythm %>%
na.omit(.) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = rhythm_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
#geom_line(size = 0.75) +
geom_point(aes(color = rhythm_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = rhythm_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
# scale_color_brewer(palette = "Set1", name = "Group") +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Rhythm\ndeviation")
# Rhythm
gca_rhythm_plot <- model_preds$fits_all_rhythm %>%
na.omit(.) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", 'AE', 'AM', 'IE', 'IM')) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
color = rhythm_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
#geom_line(size = 0.75) +
geom_point(aes(color = rhythm_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = rhythm_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
# scale_color_brewer(palette = "Set1", name = "Group") +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Rhythm\ndeviation")#+ legend_adj_2
ggsave(paste0(figs_path, "/gca_pitch_plot.png"), gca_pitch_plot, width = 150,
height = 120, units = "mm", dpi = 600)
# ggsave(paste0(figs_path, "/stress_p2.eps"), stress_p2, width = 150,
#        height = 120, units = "mm", dpi = 600, device = cairo_ps)
ggsave(paste0(figs_path, "/gca_rhythm_plot.png"), gca_rhythm_plot, width = 150,
height = 120, units = "mm", dpi = 600)
source(here::here("scripts", "02_load_data.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "vision", "gca")
vision <- read_csv("./data/clean/vision_scores.csv")
corsi <- read_csv("./data/clean/corsi_z_scores.csv")
visuospatial_df <- left_join(x = vision, y = corsi, by = "participant", all.x=TRUE)
# Load models as list and store full mod to global env
load(paste0(gca_mods_path, "/full_mods.Rdata"))
load(paste0(gca_mods_path, "/model_preds.Rdata"))
gca_final_model <- full_mods$gca_full_mod_int_1
model_preds$fits_all %>%
na.omit(.) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", "AE", "AM", "IE", "IM")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = car_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
#geom_line(size = 0.75) +
geom_point(aes(color = car_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = car_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Movement\nanticipation") + #legend_adj
ggtitle('GCA considering visuospatial anticipation performance')
# Present group differences in movement anticipation
car_gca <- model_preds$fits_all %>%
na.omit(.) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", "AE", "AM", "IE", "IM")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = car_dev)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
#geom_line(size = 0.75) +
geom_point(aes(color = car_dev), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = car_dev), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Movement\nanticipation") + #legend_adj
ggtitle('GCA considering visuospatial anticipation performance')
model_preds$fits_all %>%
na.omit(.) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", "AE", "AM", "IE", "IM")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = corsi)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
#geom_line(size = 0.75) +
geom_point(aes(color = corsi), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = corsi), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Visuospatial\nWM") + #legend_adj
ggtitle("GCA considering visuospatial WM")
# visuospatial WM
corsi_gca <- model_preds$fits_all %>%
na.omit(.) %>%
mutate(stress = if_else(stress_sum == 1, "Present", "Preterit"),
stress = fct_relevel(stress, "Present"),
group = fct_relevel(group, "SS", "AE", "AM", "IE", "IM")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, color = corsi)) +
facet_grid(group ~ stress) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
geom_ribbon(alpha = 0.2, color = NA, show.legend = F) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
stat_summary(fun.data = mean_cl_boot, geom = 'pointrange', size = 0.5,
stroke = 0.5, pch = 21) +
#geom_line(size = 0.75) +
geom_point(aes(color = corsi), color = "black", size = 1.3, show.legend = F) +
geom_point(aes(color = corsi), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
theme_big + labs(color = "Visuospatial\nWM") + #legend_adj
ggtitle("GCA considering visuospatial WM")
ggsave(paste0(figs_path, "/car_gca.png"), car_gca, width = 150,
height = 120, units = "mm", dpi = 600)
# ggsave(paste0(figs_path, "/stress_p2.eps"), stress_p2, width = 150,
#        height = 120, units = "mm", dpi = 600, device = cairo_ps)
ggsave(paste0(figs_path, "/corsi_gca.png"), corsi_gca, width = 150,
height = 120, units = "mm", dpi = 600)
library(tidyverse); library(TOSTER)
# Load data
#dem_all <- read_csv(here::here("data", "clean", "ospan_set_z_scores.csv"))
dem_all <- read_csv(here::here("data", "pupurri_analysis.csv"))
unique(dem_all$participant)
dem_all <- dem_all %>%
# separate(., col = participant,
#          into = c('group', 'id'),
#          sep = 3,
#          remove = FALSE) %>%
separate(., col = group,
into = c("proficiency", "l1"), # es = EN speaker, ms = MA speaker, on = ES speaker
sep = 1,
remove = FALSE)
dem_all$l1 <- str_replace(dem_all$l1, "es", "en")
dem_all$l1 <- str_replace(dem_all$l1, "ms", "ma")
dem_all$l1 <- str_replace(dem_all$l1, "on", "es")
dem_all %>%
group_by(l1) %>%
summarize(n = n()) # en = Eglish speakers, ma = Mandarin Chinese speakers, es = Spanish speakers
dem_all %>%
group_by(., l1) %>%
summarise(., ospan_mean = round(mean(WM_set),2),   # ospan instead of WM_set if using z scores
ospan_sd = round(sd(WM_set),2),          # ospan instead of WM_set if using z scores
n = length(unique(participant))) %>%
knitr::kable()
bartlett.test(zscoreWM ~ l1, data = zsc)
zsc <- dem_all %>%
group_by(., l1) %>%
mutate(zscoreWM = (WM_set - mean(WM_set))/sd(WM_set))
bartlett.test(zscoreWM ~ l1, data = zsc)
TOSTtwo(m1 = 0, sd1 = 2.11, n1 = 65, # EN
m2 = 0, sd2 = 2.14, n2 = 64, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
TOSTtwo(m1 = 0, sd1 = 2.11, n1 = 65, # EN
m2 = 0, sd2 = 2.72, n2 = 30, # ES
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
TOSTtwo(m1 = 0, sd1 = 2.14, n1 = 64, # MA
m2 = 0, sd2 = 2.72, n2 = 30, # ES
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
source(here::here("scripts", "00_load_libs.R"))
allinfo <- read.csv(here::here("data", "pupurri_analysis.csv"))
allinfo$participant <- tolower(allinfo$participant)
allinfo$DELE <- as.numeric(as.character(allinfo$DELE))
allinfo$age_fluent_L2 <- as.numeric(as.character(allinfo$age_fluent_L2))
allinfo$percent_l1_week <- as.numeric(as.character(allinfo$percent_l1_week))
allinfo$percent_l2_week <- as.numeric(as.character(allinfo$pc_l2_week))
allinfo <- read.csv(here::here("data", "pupurri_analysis.csv"))
allinfo$participant <- tolower(allinfo$participant)
allinfo$DELE <- as.numeric(as.character(allinfo$DELE))
allinfo$age_fluent_L2 <- as.numeric(as.character(allinfo$age_fluent_L2))
allinfo$percent_l1_week <- as.numeric(as.character(allinfo$percent_l1_week))
allinfo$percent_l2_week <- as.numeric(as.character(allinfo$pc_l2_week))
View(allinfo)
class(allinfo$percent_l1_week)
agg <- separate(data = allinfo,
col = group,
into = c("prof", "l1"),
sep = 1,
remove = FALSE)
agg$l1 <- str_replace(agg$l1, "es", "en")
agg$l1 <- str_replace(agg$l1, "ms", "ma")
agg$l1 <- str_replace(agg$l1, "on", "es")
# No. participants
agg %>%
group_by(., l1) %>%
tally()
# Females per group
agg %>%
group_by(., l1, gender) %>%
tally()
# Get mean AGE as a function of group + SD
agg %>%
group_by(l1) %>%
summarize(min_age = min(age),
max_age = max(age),
mean_age = mean(age),
sd_age = sd(age))
# Get mean TIME ABROAD in months as a function of group + SD
agg %>%
filter(., group != "mon") %>%
group_by(., l1) %>%
summarise(., max_abroad = max(mo_ES_country),
min_abroad = min(mo_ES_country),
mean_abroad = mean(mo_ES_country),
sd_abroad = sd(mo_ES_country))
# Get mean DELE as a function of group + SD
agg %>%
filter(., group %in% c("ies", "aes", "ims", "ams")) %>%
group_by(., l1) %>%
summarise(mean_DELE = mean(DELE),
sd_DELE = sd(DELE))
# When participants started learning the L2
agg %>%
filter(., group %in% c("ies", "aes", "ims", "ams")) %>%
group_by(., l1) %>%
summarise(., mean_AoA = mean(AoA_L2),
sd_AoA = sd(AoA_L2),
mean_fluentL2 = mean(AoA_L2),
sd_fluentL2 = sd(AoA_L2))
# L2 use per week in %
agg %>%
filter(., group %in% c("aes", "ies", "ams", "ims")) %>%
group_by(., l1) %>%
summarise(mean_l2use_week = mean(percent_l2_week),
sd_l2use_week = sd(percent_l2_week))
# country of origin
agg <- agg[!is.na(agg$country),]
english <- filter(agg, l1 == 'en') # descriptives show all, not only EN speakers
table(english$country)
View(agg)
agg %>%
filter(., group %in% c("aes", "ies", "ams", "ims")) %>%
group_by(., l1) %>%
summarise(mean_l2use_week = mean(percent_l2_week),
sd_l2use_week = sd(percent_l2_week))
library(knitr)
include_graphics("./figs/vwp.png", dpi = 108)
include_graphics("./figs/ospan.png", dpi = 108)
library(knitr)
include_graphics("./figs/vwp.png", dpi = 108)
