n = length(unique(participant))) %>%
knitr::kable()
dem_all %>%
group_by(., L1) %>%
filter(., l1 != "es") %>%
summarise(., dele = round(mean(DELE),2),
dele_sd = round(sd(DELE),2),
n = length(unique(participant))) %>%
knitr::kable()
# Load data
#dem_all <- read_csv(here::here("data", "clean", "ospan_set_z_scores.csv"))
dem_all <- read_csv(here::here("data", "pupurri_analysis.csv"))
dem_all <- dem_all %>%
# separate(., col = participant,
#          into = c('group', 'id'),
#          sep = 3,
#          remove = FALSE) %>%
separate(., col = group,
into = c("proficiency", "l1"), # es = EN speaker, ms = MA speaker, on = ES speaker
sep = 1,
remove = FALSE)
dem_all$l1 <- str_replace(dem_all$l1, "es", "en")
dem_all$l1 <- str_replace(dem_all$l1, "ms", "ma")
dem_all$l1 <- str_replace(dem_all$l1, "on", "es")
dem_all$DELE <- as.numeric(dem_all$DELE)
dem_all %>%
group_by(., L1) %>%
filter(., l1 != "es") %>%
summarise(., dele = round(mean(DELE),2),
dele_sd = round(sd(DELE),2),
n = length(unique(participant))) %>%
knitr::kable()
dem_all %>%
group_by(., l1) %>%
filter(., l1 != "es") %>%
summarise(., dele = round(mean(DELE),2),
dele_sd = round(sd(DELE),2),
n = length(unique(participant))) %>%
knitr::kable()
dem_all %>%
group_by(., l1) %>%
summarise(aoa_l2 = round(mean(AoA_L2),2),
aoa_l2_sd = round(sd(AoA_L2),2),
abroad = round(mean(mo_ES_country),2),
abroad_sd = round(sd(mo_ES_country),2),
l1_use = round(mean(percent_l1_week),2),
l1_use_sd = round(sd(percent_l1_week),2),
l2_use = round(mean(percent_l2_week),2),
l2_use_sd = round(sd(percent_l2_week),2),
n = length(unique(participant))
) %>% knitr::kable()
## Homogeneity of variances tests
dem_all <- dem_all %>%
filter(., l1 != "es")
## All seem ok
bartlett.test(DELE ~ l1, data = dem_all)
bartlett.test(AoA_L2 ~ l1, data = dem_all) # p-value = 0.0006495
bartlett.test(mo_ES_country ~ l1, data = dem_all) # p-value = 0.01594
bartlett.test(percent_l1_week ~ l1, data = dem_all)
bartlett.test(percent_l2_week ~ l1, data = dem_all)
# time abroad
TOSTtwo(m1 = 38.08, sd1 = 33.48, n1 = 65, # en
m2 = 40.83, sd2 = 45.46, n2 = 64, # ma
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
# dele
TOSTtwo(m1 = 38.48, sd1 = 8.19, n1 = 65, # EN
m2 = 39.17, sd2 = 7.56, n2 = 64, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
# L2 weekly use
# signicant and outside area between dotted lines
TOSTtwo(m1 = 33.31, sd1 = 17.44, n1 = 65, # EN
m2 = 41.64, sd2 = 21.66 n2 = 64, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
# L2 weekly use
# signicant and outside area between dotted lines
TOSTtwo(m1 = 33.31, sd1 = 17.44, n1 = 65, # EN
m2 = 41.64, sd2 = 21.66, n2 = 64, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
t.test(l2_use ~ l1, data = dem_all, var.equal = TRUE)
dem_all
t.test(percent_l2_week ~ l1, data = dem_all, var.equal = TRUE)
# dele
t.test(DELE ~ l1, data = dem_all, var.equal = TRUE)
TOSTtwo(m1 = 38.48, sd1 = 8.19, n1 = 65, # EN
m2 = 39.17, sd2 = 7.56, n2 = 64, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
TOSTtwo(m1 = 38.08, sd1 = 33.48, n1 = 65, # en
m2 = 40.83, sd2 = 45.46, n2 = 64, # ma
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
# time abroad
t.test(mo_ES_country ~ l1, data = dem_all, var.equal = TRUE)
TOSTtwo(m1 = 38.08, sd1 = 33.48, n1 = 65, # en
m2 = 40.83, sd2 = 45.46, n2 = 64, # ma
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
TOSTtwo(m1 = 38.48, sd1 = 8.19, n1 = 65, # EN
m2 = 39.17, sd2 = 7.56, n2 = 64, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
# L2 weekly use
# signicant and outside area between dotted lines
TOSTtwo(m1 = 33.31, sd1 = 17.44, n1 = 65, # EN
m2 = 41.64, sd2 = 21.66, n2 = 64, # MA
low_eqbound_d = -0.3,
high_eqbound_d = 0.3,
alpha = 0.05)
t.test(percent_l2_week ~ l1, data = dem_all, var.equal = TRUE)
library("papaja")
library("officer")
library("flextable")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
source(here::here("scripts", "02_load_data.R"))
source(here::here("scripts", "02_load_data.R"))
source(here::here("scripts", "01_helpers.R"))
# Get path to saved models
gca_mods_path  <- here("mods", "stress", "gca")
glmm_mods_path  <- here("mods", "stress", "glmm")
# Load models as list and store full mod to global env
load(paste0(gca_mods_path, "/gca_mon_mods.Rdata"))
load(paste0(gca_mods_path, "/gca_l2_mods.Rdata"))
load(paste0(gca_mods_path, "/model_preds.Rdata"))
mon_preds <- readRDS(file = here("mods", "stress", "gca", "model_preds_mon.Rdata"))
load(paste0(gca_mods_path, "/nested_model_comparisons.Rdata"))
mon_onset_v1_final <- readRDS(here("mods", "stress", "glmm", "onset_v1", "mon_onset_v1_final.rds"))
l2_onset_c3_dele <- readRDS(here("mods", "stress", "glmm", "onset_c3", "l2_onset_c3_dele_final_z.rds"))
l2_onset_c3_dele <- readRDS(here("mods", "stress", "glmm", "onset_c3", "l2_onset_c3_dele_final_z.rds"))
knitr::include_graphics(
here("figs", "stress", "gca", "stress_l1.png")
)
params <- gca_mon_mods$gca_mod_mon_base %>%
tidy_lme4() %>%
rename(B = Estimate)
params$subscript <-
c(paste0(0:3, 0))
params <- tibble::column_to_rownames(params, 'subscript')
params$subscript <-
c(paste0(0:3, 0))
# Shortcut for inline reporting from the above table
report_row <- function(row_name) report_fixef_row(params, row_name)
plogis(report_row('1'))
knitr::include_graphics(
here("figs", "stress", "gca", "stress_mon.png")
)
# Get full mod and make it pretty for the table
mon_onset_v1_final %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
params <- gca_l2_mods$gca_l2_mod_dele_final %>%
tidy_lme4() %>%
rename(B = Estimate)
params$subscript <-
c(paste0(0:5, 0), paste0(0:4, 1))
params <- tibble::column_to_rownames(params, 'subscript')
params$subscript <-
c(paste0(0:5, 0), paste0(0:4, 1))
# Shortcut for inline reporting from the above table
report_row <- function(row_name) report_fixef_row(params, row_name)
# Get full mod and make it pretty for the table
pretty_fixed_effects <- gca_l2_mods$gca_l2_mod_dele_final %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:3, 0), paste0(0:3, 1),
paste0(0:2, 2))
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects$Parameter %<>% paste(., var_labels)
pretty_fixed_effects %>%
select(-effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
plogis(0.222)
plogis(report_row(5)[2])
border_1 <- fp_border(width = 1.5)
border_2 <- fp_border(width = 0.75)
model_preds$target_offset_preds_l2_dele %>%
mutate(stress = if_else(stress == 1, "Present", "Preterit"),
l1 = if_else(l1 == 'en', "English", "Mandarin"),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
arrange(l1, stress) %>%
group_by(l1, stress) %>%
filter(., DELE == max(DELE) | DELE == min(DELE)) %>%
distinct() %>%
#ungroup() %>%
mutate(l1 = blank_same_as_last(as.character(l1)),
stress = blank_same_as_last(as.character(stress))) %>%
select(L1 = l1, `Lexical stress` = stress, Proficiency = DELE, Probability = prob,
LB = prob_lb, UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
model_preds$target_offset_preds_l2_dele %>%
mutate(stress = if_else(stress == 1, "Present", "Preterit"),
l1 = if_else(l1 == 'EN', "English", "Mandarin"),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
arrange(l1, stress) %>%
group_by(l1, stress) %>%
filter(., DELE == max(DELE) | DELE == min(DELE)) %>%
distinct() %>%
#ungroup() %>%
mutate(l1 = blank_same_as_last(as.character(l1)),
stress = blank_same_as_last(as.character(stress))) %>%
select(L1 = l1, `Lexical stress` = stress, Proficiency = DELE, Probability = prob,
LB = prob_lb, UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
knitr::include_graphics(
here("figs", "stress", "gca", "stress_dele_split.png")
)
# Get full mod and make it pretty for the table
pretty_fixed_effects <- gca_l2_mods$gca_l2_mod_use_final %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:3, 0), paste0(0:3, 1),
paste0(0:2, 2))
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects$Parameter %<>% paste(., var_labels)
pretty_fixed_effects %>%
select(-effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
model_preds$target_offset_preds_l2_use %>%
mutate(stress = if_else(stress == 1, "Present", "Preterit"),
l1 = if_else(l1 == 'EN', "English", "Mandarin"),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
group_by(l1, stress) %>%
filter(., percent_l2_week == max(percent_l2_week) |
percent_l2_week == min(percent_l2_week)) %>%
distinct() %>%
# ungroup() %>%
arrange(l1, stress) %>%
mutate(l1 = blank_same_as_last(as.character(l1)),
stress = blank_same_as_last(as.character(stress))) %>%
select(L1 = l1, `Lexical stress` = stress, `Weekly L2 % use` = percent_l2_week, Probability = prob,
LB = prob_lb, UB = prob_ub) %>%
flextable() %>%
width(., j = c(2, 3, 4), width = c(1.1, 1.3, 1.1)) %>%
font(., fontname = "Times", part = "all") %>%
fontsize(., size = 11) %>%
border_remove(.) %>%
border(., part = "header",
border.top = border_1,
border.bottom = border_2) %>%
hline_bottom(., part = "body", border = border_1)
knitr::include_graphics(
here("figs", "stress", "gca", "stress_use_l1.png")
)
# Get full mod and make it pretty for the table
l2_onset_c3_dele %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
# Get full mod and make it pretty for the table
l2_onset_c3_use %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
# Get full mod and make it pretty for the table
l2_onset_c3_use %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
l2_onset_c3_use <- readRDS(here("mods", "stress", "glmm", "onset_c3", "l2_onset_c3_use_final_z.rds"))
# Get full mod and make it pretty for the table
l2_onset_c3_use %>%
tidy_lme4() %>%
mutate(Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p.value) %>%
select(-p, -effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
knitr::include_graphics(
here("figs", "stress", "gca", "stress_use_split.png")
)
knitr::include_graphics(
here("figs", "stress", "gca", "stress_use_l1.png")
)
knitr::include_graphics(
here("figs", "stress", "gca", "stress_use_cond.png")
)
knitr::include_graphics(
here("figs", "stress", "gca", "stress_use_split.png")
)
params <- gca_mon_mods$gca_mod_mon_base %>%
tidy_lme4() %>%
rename(B = Estimate)
params$subscript <-
c(paste0(0:3, 0))
params <- tibble::column_to_rownames(params, 'subscript')
params$subscript <-
c(paste0(0:3, 0))
# Shortcut for inline reporting from the above table
report_row <- function(row_name) report_fixef_row(params, row_name)
knitr::include_graphics(
here("figs", "stress", "gca", "stress_dele_l1.png")
)
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1)
model_preds$fits_all_l2_dele %>%
mutate(Proficieny = as.factor(DELE_z),
condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, lty = Proficiency)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5)
model_preds$fits_all_l2_dele %>%
mutate(`Proficieny` = as.factor(DELE_z),
condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin"))
model_preds$fits_all_l2_dele %>%
mutate(`Proficiency` = as.factor(DELE_z),
condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, lty = `Proficiency`)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5)
model_preds$fits_all_l2_dele %>%
mutate(`Proficiency` = as.factor(DELE_z),
condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, lty = `Proficiency`)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = "grey", show.legend = F)
model_preds$fits_all_l2_dele %>%
mutate(`Proficiency` = as.factor(DELE_z),
condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, lty = `Proficiency`)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = "grey", show.legend = F)
model_preds$fits_all_l2_dele %>%
mutate(`Proficiency` = as.factor(DELE_z),
condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, lty = `Proficiency`)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5)
model_preds$fits_all_l2_dele %>%
mutate(Proficiency = as.factor(DELE_z),
condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, color = condition, lty = Proficiency)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = "grey", show.legend = F)
model_preds$fits_all_l2_dele %>%
mutate(Proficiency = as.factor(DELE_z),
condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, color = condition, lty = Proficiency)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_line(size = 0.35)
model_preds$fits_all_l2_dele %>%
mutate(`Proficiency` = as.factor(DELE_z),
condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, color = condition, lty = `Proficiency`)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = "grey", show.legend = F
model_preds$fits_all_l2_dele %>%
mutate(`Proficiency` = as.factor(DELE_z),
condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, color = condition, lty = `Proficiency`)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = "grey", show.legend = F)
model_preds$fits_all_l2_dele
model_preds$fits_all_l2_dele %>%
mutate(`Proficiency` = as.factor(DELE_z),
condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'EN', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin,
fill = condition, lty = `Proficiency`)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
# stat_summary(fun.y = "mean", geom = "line", size = 1) +
geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
# stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
#              alpha = 0.5) +
geom_line(size = 0.35)
model_preds$fits_all_l2_dele %>%
filter(., DELE_z == 0)
model_preds$fits_all_l2_dele %>%
filter(., DELE_z == median(DELE_z))
knitr::include_graphics(
here("figs", "stress", "gca", "stress_use_cond.png")
)
knitr::include_graphics(
here("figs", "stress", "gca", "stress_dele_split.png")
)
