geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1, color = 'pink')
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
filter(condition == "Present") %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin)) + #, fill = condition
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1, color = 'pink') +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_point(aes(color = DELE), size = 0.85, show.legend = F) +
scale_color_gradient(low = "#AF7AC5", high = "#E74C3C")
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
filter(condition == "Present") %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin)) + #, fill = condition
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1, color = 'pink') +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5, color = 'pink') +
geom_point(aes(color = DELE), size = 0.85, show.legend = F) +
scale_color_gradient(low = "#AF7AC5", high = "#E74C3C")
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
filter(condition == "Present") %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin)) + #, fill = condition
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1, color = 'pink') +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5, color = 'pink') +
geom_point(aes(color = DELE), size = 0.85, show.legend = F) +
scale_color_gradient(low = "#AF7AC5", high = "#E74C3C") +
# geom_point(data = dele_preterit, aes(color = DELE)) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
scale_fill_brewer(palette = 'Set1', name = "Tense",
labels = c("Present", "Preterit"))
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
filter(condition == "Present") %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin)) + #, fill = condition
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1, color = 'pink') +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5, color = 'pink') +
geom_point(aes(color = DELE), size = 0.85, show.legend = F) +
scale_color_gradient(low = "#AF7AC5", high = "#E74C3C") +
# geom_point(data = dele_preterit, aes(color = DELE)) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
scale_fill_brewer(palette = 'Set1', name = "Tense",
labels = c("Present", "Preterit")) +
theme_big + labs(color = "Proficiency")
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
filter(condition == "Present") %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin)) + #, fill = condition
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1, color = 'pink') +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5, color = 'pink') +
geom_point(aes(color = DELE), size = 0.85, show.legend = F) +
scale_color_gradient(low = "#AF7AC5", high = "#E74C3C") +
# geom_point(data = dele_preterit, aes(color = DELE)) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# scale_fill_brewer(palette = 'Set1', name = "Tense",
#                   labels = c("Present", "Preterit")) +
theme_big + labs(color = "Proficiency")
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
filter(condition == "Preterit") %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin)) + #, fill = condition
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_point(aes(color = DELE), size = 0.85, show.legend = F) +
scale_color_gradient(low = "#AF7AC5", high = "#E74C3C") +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# scale_fill_brewer(palette = 'Set1', name = "Tense",
#                   labels = c("Present", "Preterit")) +
theme_big + labs(color = "Proficiency")
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
filter(condition == "Preterit") %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin)) + #, fill = condition
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_point(aes(color = DELE), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# scale_fill_brewer(palette = 'Set1', name = "Tense",
#                   labels = c("Present", "Preterit")) +
theme_big + labs(color = "Proficiency")
stress_dele_l1_pres <- model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
filter(condition == "Present") %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin)) + #, fill = condition
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1, color = 'pink') +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5, color = 'pink') +
geom_point(aes(color = DELE), size = 0.85, show.legend = F) +
scale_color_gradient(low = "#E74C3C", high = "#AF7AC5") +
# geom_point(data = dele_preterit, aes(color = DELE)) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# scale_fill_brewer(palette = 'Set1', name = "Tense",
#                   labels = c("Present", "Preterit")) +
theme_big + labs(color = "Proficiency") #legend_adj +
stress_dele_l1_pret <- model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
filter(condition == "Preterit") %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin)) + #, fill = condition
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_point(aes(color = DELE), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# scale_fill_brewer(palette = 'Set1', name = "Tense",
#                   labels = c("Present", "Preterit")) +
theme_big + labs(color = "Proficiency") #legend_adj +
stress_dele_l1_pret + stress_dele_l1_pres
ggarrange(stress_dele_l1_pret, stress_dele_l1_pres)
stress_dele_l1_pret
stress_dele_l1_pres + model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
filter(condition == "Preterit") %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin)) + #, fill = condition
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_point(aes(color = DELE), size = 0.85, show.legend = F)
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin)) + #, fill = condition
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1, color = 'pink') +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5, color = 'pink') +
geom_point(aes(color = DELE), size = 0.85, show.legend = F) +
scale_color_gradient(low = "#E74C3C", high = "#AF7AC5") +
# geom_point(data = dele_preterit, aes(color = DELE)) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target")
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin)) + #, fill = condition
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1, color = 'pink') +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5, color = 'pink') +
geom_point(aes(color = DELE), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target")
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, fill = condition)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5, color = 'pink') +
geom_point(aes(color = DELE), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target")
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, fill = condition)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_point(aes(color = DELE), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600"))
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, fill = condition)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1)
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, fill = condition)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
mutate(condition %in% 'Present') +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_point(aes(color = DELE), size = 0.85, show.legend = F)
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, fill = condition)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
mutate(model_preds$fits_all_l2_dele$condition %in% 'Present') +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_point(aes(color = DELE), size = 0.85, show.legend = F)
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, fill = condition)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
filter(condition %in% 'Present') +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_point(aes(color = DELE), size = 0.85, show.legend = F)
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, fill = condition)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
filter(model_preds$fits_all_l2_dele$condition %in% 'Present') +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_point(aes(color = DELE), size = 0.85, show.legend = F)
source(here::here("scripts", "00_load_libs.R"))
source(here::here("scripts", "02_load_data.R"))
load(paste0(gca_mods_path, "/gca_l2_mods.Rdata"))
list2env(gca_l2_mods, globalenv())
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, fill = condition)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'smooth',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_point(aes(color = DELE), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# scale_fill_brewer(palette = 'Set1', name = "Tense",
#                   labels = c("Present", "Preterit")) +
theme_big + legend_adj + labs(color = "Proficiency")
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, fill = condition)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_line(aes(color = DELE), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# scale_fill_brewer(palette = 'Set1', name = "Tense",
#                   labels = c("Present", "Preterit")) +
theme_big + legend_adj + labs(color = "Proficiency")
model_preds$fits_all_l2_dele %>%
mutate(condition = if_else(condition_sum == 1, "Present", "Preterit"),
condition = fct_relevel(condition, "Present"),
l1 = if_else(l1 == 'en', 'English', 'Mandarin'),
l1 = fct_relevel(l1, "English", "Mandarin")
) %>%
ggplot(., aes(x = time_zero, y = fit, ymax = ymax, ymin = ymin, fill = condition)) +
facet_wrap(l1 ~ .) +
geom_hline(yintercept = 0, lty = 3, size = 0.4) +
geom_vline(xintercept = 4, lty = 3, size = 0.4) +
stat_summary(fun.y = "mean", geom = "line", size = 1) +
# geom_ribbon(alpha = 0.2, color = "grey", show.legend = F) +
stat_summary(fun.data = mean_cl_boot, geom = 'ribbon',fun.args=list(conf.int=0.95),
alpha = 0.5) +
geom_smooth(aes(color = DELE), size = 0.85, show.legend = F) +
scale_x_continuous(breaks = c(-4, 0, 4, 8, 12),
labels = c("-200", "0", "200", "400", "600")) +
labs(x = "Time (ms) relative to target syllable offset",
y = "Empirical logit of looks to target") +
# scale_fill_brewer(palette = 'Set1', name = "Tense",
#                   labels = c("Present", "Preterit")) +
theme_big + legend_adj + labs(color = "Proficiency")
# Load models as list and store full mod to global env
load(paste0(gca_mods_path, "/gca_mon_mods.Rdata"))
gca_mon_mods
View(gca_mon_mods)
pretty_fixed_effects <- gca_l2_mods$gca_l2_dele_final %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
library("papaja")
library("officer")
library("flextable")
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
source(here::here("scripts", "02_load_data.R"))
source(here::here("scripts", "01_helpers.R"))
load(paste0(gca_mods_path, "/gca_l2_mods.Rdata"))
# Get path to saved models
gca_mods_path  <- here("mods", "stress", "gca")
load(paste0(gca_mods_path, "/gca_l2_mods.Rdata"))
# Get full mod and make it pretty for the table
pretty_fixed_effects <- gca_l2_mods$gca_l2_dele_final %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
# Get full mod and make it pretty for the table
pretty_fixed_effects <- gca_l2_dele_final %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
gca_l2_mods$gca_l2_dele_final %>%
tidy_lme4()
gca_l2_mods$gca_l2_dele_final
gca_l2_dele_final
gca_l2_mods$gca_l2_dele_final
View(gca_l2_mods)
# Load models as list and store full mod to global env
load(paste0(gca_mods_path, "/gca_mon_mods.Rdata"))
View(gca_mon_mods)
# Get full mod and make it pretty for the table
pretty_fixed_effects <- gca_mon_mods$gca_mod_mon_base %>%
tidy_lme4() %>%
mutate(p = format_pval(p),
Parameter = fix_param_names(Parameter)) %>%
mutate_each(funs(format_fixef_num), Estimate:t) %>%
rename(`_t_` = t, `_p_` = p)
# Include gammas (Gij) after each parameter name
subs <- c(paste0(0:3, 0))
var_labels <- parenthesize(paste0(emphasize("&gamma;"), "~", subs, "~"))
pretty_fixed_effects
# pretty_fixed_effects <- pretty_fixed_effects[0:4,]
pretty_fixed_effects1 <- pretty_fixed_effects[,1:]
# pretty_fixed_effects <- pretty_fixed_effects[0:4,]
pretty_fixed_effects1 <- pretty_fixed_effects %>% select(-effect)
pretty_fixed_effects1
pretty_fixed_effects %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr")) %>%
select(-effect)
pretty_fixed_effects %>%
select(-effect) %>%
knitr::kable(format = "pandoc", align = str_tokenize("lrrrr"))
